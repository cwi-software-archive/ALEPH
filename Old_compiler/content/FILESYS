
          IDENT  FILESYS
          SST
 FILE     =      1           X.FILE, FOR VARIOUS ROUTINES

 CPC      MACRO  TYPE,OPTION
 +        SB4    X.FILE      SAVE FILE ADDRESS
          SA1    X.FILE
          RJ     =XCPC
          VFD    60/TYPE_S42+1S40+OPTION_B
          SX.FILE B4         RESTORE X.FILE
 CPC      ENDM
          SPACE  10,10
* BACK FILE, REWINDS FILE           ************************************
 BAC2ILE  JP     *+1S17      BACK FILE + ''FILE:
          ENTRY  BAC2ILE
          SA5    X.FILE      FILENAME
          ZR,X5  BAC2ILE     = DUMMY;
          SA5    X.FILE+FILETYPE
          LX5    SIGNBIT-READBIT
          NG,X5  NOEOR       IF READING, NO END OF RECORD
          SX2    B0          PUT END OF RECORD
          RJ     =XPUT8ORD   + FILE + 0
 NOEOR    BSS    0
          CPC    7,150       CLOSE REWIND + FILE
          RJ     /OPFLS/OPENIN OPEN INPUT FILE
          EQ     BAC2ILE     RETURN.
          SPACE  10,10
* CLOSE FILES                       ************************************
 CLOFLS   JP     *+1S17
         ENTRY   CLOFLS
* MAY NEVER CALL ERROR OR ERREXT
          QUAL   CLOFLS
          SA5    FLS.OK      IF FILES NOT OK,
          ZR,X5  RETURN      DON'T TRY TO CLOSE THEM.
*
          SA5    CA.ADDR
          SA.FILE X5+CA.FILES
 NEXTFLE  BSS    0
          ZR,X.FILE RETURN
          SA5    X.FILE      FILE NAME
          ZR,X5  GETNEXT     DUMMY FILE
          SA5    X.FILE+FILETYPE
          BX4    X5
          BX3    X4
          LX3    SIGNBIT-INPBIT
          LX4    SIGNBIT-OUTPBIT
          BX4    X3+X4       ZERO IF NEITHER INPUT NOR OUTPUT
          PL,X4  SCRATCH

          LX5    SIGNBIT-READBIT
          NG,X5  GETNEXT     NO WRITE FILE

          MX2    0           END OF RECORD
          RJ     PUT8ORD     WRITE EOR
 GETNEXT  BSS    0
          SA.FILE X.FILE+FILECHN
          SX.FILE X.FILE     ADDRESS PART ONLY
          EQ     NEXTFLE

 SCRATCH  BSS    0
          CPC    7,174       CLOSE RETURN + FILE
          EQ     GETNEXT

 RETURN   =      CLOFLS
          QUAL * CLOFLS
          SPACE  10,10
* CLOSE LINE                        ************************************
* THIS ROUTINE MAY ONLY BE CALLED IN PROTECTED STATE.
          ENTRY  CLOLINE
 CLOLINE  JP     *+1S17      CLOSE LINE, FET ADDRESS OF OUTPUT FILE IN
                             X.FILE WHICH REMAINS UNCHANGED.
          MX3    0           FOR A POSSIBLE CALL OF 'PUTWORD'
          SA5    X.FILE
          ZR,X5  CLOLINE     DUMMY FILE
          SA5    X.FILE+FILECH#
          SX5    X5-NEWSTAT
          ZR,X5  CLOLINE     FRESH RECORD
* SOME ACTION NECESSARY
          BX=    X1,X.FILE
          SA2    X.FILE+FILEWORD
          RJ     PUTWORD     WRITE WORD, X3 ALREADY SET
          MX5    -2*6
          BX5    -X5*X2
          ZR,X5  CLOLINE     LAST WORD ENDS IN 0000B
          MX2    0
          RJ     PUTWORD     ELSE WRITE ZERO WORD
          EQ     CLOLINE
          SPACE  10,10
* EXTEND FILE,REVERT TO WRITING     ************************************
 EXT4ILE  JP     *+1S17      EXTEND FILE + ''FILE:
          ENTRY  EXT4ILE
          SA5    X.FILE      FILENAME
          ZR,X5  EXT4ILE     = DUMMY;
          ERROR  (EXTEND NOT IMPLEMENTED),F.FILE
          EQ     EXT4ILE     RETURN.
          SPACE  10,10
* FILES OK FLAG                     ************************************
          ENTRY  FLS.OK
 FLS.OK   CON    0           ZERO = NOT OK, NON-ZERO = OK.
          SPACE  10,10
* OPEN FILES                        ************************************
 OPFLS    JP     *+1S17
          ENTRY  OPFLS
          QUAL   OPFLS
          SA5    CA.ADDR
          SA.FILE X5+CA.FILES
 NEXTFLE  BSS    0
          SX.FILE X.FILE     ADDRESS ONLY
          ZR,X.FILE OPFLS
          SA5    X.FILE      FILE NAME
          ZR,X5  GETNEXT     DUMMY FILE
*
*'ACTION' OPEN FILE + ''FILE:
*  IS INPUT FILE + FILE, OPEN INPUT FILE + FILE;
*  OPEN OUTPUT FILE + FILE.
*
*'ACTION' OPEN INPUT FILE + ''FILE:  $ ALSO FOR BACKFILE $
*  IS CHAR FILE + FILE, OPEN READ + FILE, SET READ MODE + FILE,
*    NEWSTAT -> STATUS;
*  OPEN REWIND READ + FILE, SET READ MODE + FILE, 0 -> STATUS,
*    INIT INPUT DATA FILE.
*
*'ACTION' OPEN OUTPUT FILE + ''FILE:
*  IS CHAR FILE + FILE, OPEN WRITE + FILE, CLEAR READ MODE + FILE,
*    NEWSTAT -> STATUS;
*  OPEN REWIND WRITE + FILE, CLEAR READ MODE + FILE, 0 -> STATUS,
*    INIT OUTPUT DATA FILE.
*
*OPENFILE JP      *+1S17         OPEN FILE + ''FILE
          SA5    X.FILE+FILETYPE IS INPUT FILE
          LX5    SIGNBIT+INPBIT                + FILE,
          PL,X5  OUTPUT
          RJ     OPENIN      OPEN INPUT FILE + FILE
          EQ     EOOPENFL    ;

 OUTPUT   BSS    0
          RJ     OPENOUT     OPEN OUTPUT FILE + FILE
          EQ     EOOPENFL    .
          SPACE  10,10
 OPENIN   JP     *+1S17      OPEN INPUT FILE + ''FILE:
          SA5    X.FILE+FILETYPE IS
          LX5    SIGNBIT-CHDATBIT   CHARFILE + FILE
          NG,X5  NO.ICFL     ,
          RJ     CLEARFET
          CPC    4,100       OPEN READ + FILE,
          RJ     SETRM       SET READ MODE + FILE,
          SX6    NEWSTAT     NEWSTAT
          SA6    X.FILE+FILECH#      -> STATUS
          EQ     OPENIN      ;

 NO.ICFL  BSS    0
          RJ     CLEARFET
          CPC    4,140       OPEN REWIND READ + FILE,
          RJ     SETRM       SET READ MODE + FILE,
          MX6    0           0
          SA6    X.FILE+FILECH# -> STATUS,
          RJ     INITIDFL    INIT INPUT DATA FILE + FILE
          EQ     OPENIN      .
          SPACE  10,10
 OPENOUT  JP     *+1S17      OPEN OUTPUT FILE + ''FILE:
          SA5    X.FILE+FILETYPE IS
          LX5    SIGNBIT-CHDATBIT   CHARFILE + FILE
          NG,X5  NO.OCFL     ,
          RJ     CLEARFET
          CPC    4,104       OPEN WRITE + FILE,
          RJ     CLEARRM     CLEAR READ MODE + FILE,
          SX6    NEWSTAT     NEWSTAT
          SA6    X.FILE+FILECH#      -> STATUS
          EQ     OPENOUT      ;

 NO.OCFL  BSS    0
          RJ     CLEARFET
          CPC    4,144       OPEN REWIND WRITE + FILE,
          RJ     CLEARRM     CLEAR READ MODE + FILE,
          MX6    0           0
          SA6    X.FILE+FILECH# -> STATUS,
          RJ     INITODFL    INIT OUTPUT DATA FILE + FILE
          EQ     OPENOUT      .
          SPACE  10,10
 SETRM    JP     *+1S17      SET READ MODE + ''FILE:
          SA5    X.FILE+FILETYPE
          SX6    B1
          LX6    READBIT
          BX6    X6+X5
          SA6    A5
          EQ     SETRM
          SPACE  10,10
 CLEARRM  JP     *+1S17      CLEAR READ MODE + ''FILE:
          SA5    X.FILE+FILETYPE
          SX6    B1
          LX6    READBIT
          BX6    -X6*X5
          SA6    A5
          EQ     CLEARRM
          SPACE  10,10
 CLEARFET JP     *+1S17      CLEAR FET
          SA5    X.FILE+B1   FIRST
          SX6    X5          BIT 17 - 0 ONLY
          SA6    A5+B1       IN
          SA6    A6+B1       OUT
          EQ     CLEARFET
         SPACE  10,10
          QUAL   INITIDFL
*
*'ACTION' INIT INPUT DATA FILE - LISTS PNT:
*  GET LISTS PNT + LISTS PNT,
*    (LISTS PNT = NUM PNT $ SIMPLE FILE $, SET SIMPLE BIT ;
*     TREAT LIST NAMES + LISTS PNT).
*
*'ACTION' TREAT LIST NAMES + >LISTS PNT - WORD:
 WORD     =      2           X.WORD
*  OBTAIN WORD + WORD,
*  (WORD = 0 $ END OF LIST NAMES ON FILE $;
*   LISTS PNT = NUM ZONE PNT, ERROR + TOO MANY LISTS;
*   FILL LIST BLOCK + LISTS PNT + WORD,
*     NEXT + FILE ADM + LISTS PNT, : TREAT LIST NAMES).
*
*'ACTION' FILL LIST BLOCK + >LISTS PNT + >WORD - PNT:
 PNT      =      4           B.PNT
*  LISTS PNT -> PNT,
*  FIND LIST BLOCK + PNT + WORD,
*  '<<PRE' * LIST ADM[ADDR*FILE ADM[PNT]] -> '<<PRE' * FILE ADM[PNT],
*  EXCHANGE BLOCKS + LISTSPNT + PNT.
*
*'ACTION' FIND LIST BLOCK + >PNT> + >WORD - WCNT - SIZE:
 SIZE     =      5           B.SIZE, IMPLEMENTED NEGATIVELY
*  EXTRACT LENGTH + WORD + CNT, 0 -> SIZE,
*  (PLACE WORD:
*    FIND PLACE FOR WORD + PNT + SIZE + WORD,
*       (WCNT = 0;
*        DECR + WCNT, OBTAIN WORD + WORD, : PLACE WORD)
*  )#PLACE WORD.
*
*'FUNCTION' FIND PLACE FOR WORD + >PNT> + >SIZE> + >WORD - ADDR:
*$ THIS RULE IS GIVEN A POINTER TO A LIST BLOCK IN A
*$ FILE ADM. THE LAST 'SIZE' WORDS OF THE NAME OF THE
*$ LIST HAVE ALREADY BEEN MATCHED. THE RULE RETURNS
*$ A POINTER TO A (POSSIBLY DIFFERENT) LIST BLOCK WITH
*$ A LIST THE NAME OF WHICH ENDS WITH THE SAME
*$ 'SIZE' WORDS PRECEDED BY 'WORD'.
*  PLUS + ADDR * FILE ADM[PNT] + '[]NAME' + ADDR,
*  MINUS + ADDR + SIZE + ADDR,
*  (LIST ADM[ADDR] = WORD, $ WORD FITS $ INCR + SIZE;
*   FIND NEXT LIST + PNT + SIZE, : FIND PLACE FOR WORD).
*
*'FUNCTION' FIND NEXT LIST + >PNT> + >SIZE - PNT2:
 PNT2     =      6           X.PNT2
*$ FINDS THE NEXT LIST BLOCK THE NAME OF THE LIST OF WHICH
*$ ENDS WITH THE SAME 'SIZE' WORDS.
*  PNT -> PNT2, NEXT + FILE ADM + PNT2,
*  (PNT2 = NUM ZONE PNT, ERROR + UNKNOWN LIST;
*   PARTIAL NAMES EQUAL + PNT + PNT2 + SIZE, PNT2 -> PNT;
*   PNT2 -> PNT, : FIND NEXT LIST).
*
*'QUESTION' PARTIAL NAMES EQUAL + >PNT + >PNT2 + >SIZE
*  - ADDR1 - ADDR2 - PNCNT:
*  PLUS + ADDR * FILE ADM[PNT] + '[]NAME' + ADDR1,
*  PLUS + ADDR * FILE ADM[PNT2] + '[]NAME' + ADDR2,
*  SIZE -> PNCNT,
*  (COMPARE:
*    PNCNT = 0;
*    LIST ADM[ADDR1] = LIST ADM[ADDR2],
*    DECR + ADDR1, DECR + ADDR2, DECR + PNCNT, : COMPARE).
*
 INITIDFL JP     *+1S17      INIT INPUT DATA FILE
          LISTSPNT 5         GET LISTS PNT
          BX6    X5
          SA6    =SLISTSPNT  + LISTS PNT,
*SIMPLE FILE
          NUMZNPNT 5         X5:= NUM PNT
          IX5    X5-X6       LISTS PNT = NUM PNT
          NZ,X5  TRLSTNMS    ,
          SA5    X.FILE+FILETYPE SET
          SX6    B1            SIMPLE
          LX6    SIMPBIT         BIT
          BX6    X6+X5             +
          SA6 A5 X.FILE+FILETYPE      FILE
          EQ     INITIDFL    ;

 TRLSTNMS BSS    0           TREAT LIST NAMES:
          BX=    1,FILE
          RJ     =XGETWORD   OBTAIN
          NZ,X3  ERRSHORT           + WORD,
          ZR,X2  EOTRNMS     WORD = 0;
          SA4    LISTSPNT    LISTS PNT
          NUMZNPNT 5         =
          IX4    X4-X5       NUM ZONE PNT,
          ZR,X4  ERRMANY     ERROR;
*FILLBLCK BSS    0           FILL LIST BLOCK:
          SA5    LISTSPNT    LISTS PNT
          SB.PNT X5          -> PNT,
*FINDBLCK BSS    0           FIND LIST BLOCK:
          AX5    X.WORD,B3   EXTRACT LENGTH
          MX4    -8
          BX6    -X4*X5      + WORD
          SA6    =SWCNT      + WCNT,
          SB.SIZE B0         0 -> SIZE,
 PLACEWRD BSS    0
 FINDPL   BSS    0           FIND PLACE FOR WORD:
          SA5    B.PNT       PLUS + ADDR * FILE ADM[PNT]
          SX5    X5+[]NAME   + '[]NAME' + ADDR,
          SA5    X5+B.SIZE   MINUS + ADDR + SIZE + ADDR,
          BX5    X5-X.WORD   LIST ADM[ADDR]
          NZ,X5  NOTFND      =
          NG,X5  NOTFND      WORD,
          SB.SIZE B.SIZE-B1  INCR + SIZE;
          EQ     EOFINDPL

 NOTFND   BSS    0
 FINDNEXT BSS    0           FIND NEXT LIST:
          SX.PNT2 B.PNT+B2   PNT -> PNT2, NEXT + FILE ADM + PNT2,
          NUMZNPNT 5         NUM ZONE PNT
          IX5    X5-X.PNT2   = PNT2,
          ZR,X5  ERRUNKN     ERROR + UNKNOWN LIST;
*PARTNME  BSS    0           PARTIAL NAMES EQUAL:
          SA4    B.PNT       PLUS + ADDR * FILE ADM[PNT]
          SA4    X4+[]NAME   + '[]NAME' + ADDR1, (X4:= LIST ADM[ADDR1])
          SA5    X.PNT2      PLUS + ADDR * FILE ADM[PNT2]
          SA5    X5+[]NAME   + '[]NAME' + ADDR2, (X5:= LIST ADM[ADDR2])
          SX7    B.SIZE      SIZE -> PNCNT,
 COMPARE  BSS    0
          ZR,X7  EOPARTNM    PNCNT = 0;
          BX5    X4-X5       LIST ADM[ADDR1]
          NZ,X5  EOPARTNM    =
          NG,X5  EOPARTNM    LIST ADM[ADDR2],
          SA4    A4-B1       DECR + ADDR1,
          SA5    A5-B1       DECR + ADDR2,
          SX7    X7+B1       DECR + PNCNT (NEGATIVE),
          EQ     COMPARE     : COMPARE.

 EOPARTNM BSS    0           X7 = 0 IF SUCCESS
          SB.PNT X.PNT2      PNT2 -> PNT,
          NZ,X7  FINDNEXT    : FIND NEXT LIST
          EQ     FINDPL      : FIND PLACE FOR WORD

 EOFINDPL BSS    0           PROPER PLACE FOR WORD FOUND.
          SA5    WCNT        WCNT
          ZR,X5  EOFINDBL    = 0;
          SX6    X5-1        DECR +
          SA6    A5          WCNT,
          BX=    1,FILE
          RJ     =XGETWORD   OBTAIN
          NZ,X3  ERRSHORT    + WORD,
          BX=    WORD,2
          EQ     PLACEWRD    : PLACEWORD.

 EOFINDBL BSS    0           @ OF PROPER LIST BLOCK IN B.PNT.
          SA5    B.PNT       ADDR * FILE ADM[PNT] -> X5,
          SA5    X5+<<PRE    '<<PRE' * LIST ADM[X5]
          BX6    X5          ->
          SA6    B.PNT+B1    '<<PRE' * FILE ADM[PNT],
          SA3    LISTSPNT    EXCHANGE
          SA4    X3          FIRST
          SA5    B.PNT       WORDS
          BX6    X4          OF THE BLOCKS
          SA6    A5          AT LISTS PNT
          BX7    X5          AND
          SA7    A4          AT PNT,
          SA4    A4+B1       EXCHANGE
          SA5    A5+B1       SECOND WORDS
          BX6    X4          OF THE BLOCKS
          SA6    A5          AT LISTS PNT
          BX7    X5          AND
          SA7    A4          AT PNT.
*EOFILLBL BSS    0           BLOCK AT LISTS PNT FILLED.
          SA5    LISTSPNT    NEXT
          SX6    X5+B2            + FILE ADM
          SA6    A5                           + LISTS PNT,
          EQ     TRLSTNMS    : TREAT LIST NAMES.

 EOTRNMS  EQU    INITIDFL

 ERRSHORT ERROR  (DATAFILE INCOMPLETE),F.FILE
 ERRUNKN  ERROR  (DATAFILE CONTAINS UNKNOWN LIST NAME),F.FILE
 ERRMANY  EQU    ERRUNKN     ?
          QUAL * INITIDFL
 INITIDFL =      /INITIDFL/INITIDFL
          SPACE  10,10
          QUAL   INITODFL
*
*'ACTION' INIT OUTPUT DATA FILE - PNT:
*  GET LISTS PNT + PNT,
*   (PNT = NUM PNT $ SIMPLE FILE $, SET SIMPLE BIT + FILE;
*    TREAT LIST ZONES + PNT, PUT WORD + FILE + 0 + 0).
 PNT      =      2           X.PNT
*
*'ACTION' TREAT LIST ZONES + >PNT:
*  PNT = NUM ZONE PNT;
*  TREAT LIST ZONE + PNT, NEXT + FILE ADM + PNT,
*    : TREAT LIST ZONES.
*
*'ACTION' TREAT LIST ZONE + >PNT - ADDR:
*  ADDR * FILE ADM [PNT] -> ADDR $ LIST ADDRESS $,
*  '<<PRE' * LIST ADM [ADDR] -> '<<PRE' * FILE ADM [PNT],
*  WRITE NAME + ADDR.
 ADDR     =      4           B.ADDR
*
*'ACTION' WRITE NAME + >ADDR - WORD - CNT:
 WORD     =      2           X.WORD, FOR PUT WORD
 CNT      =      5           B.CNT
*  PLUS + ADDR + '[]NAME' + ADDR,
*  EXTRACT LENGTH + LIST ADM[ADDR] + CNT,
*  (NAME:
*    PUT WORD + FILE + LIST ADM[ADDR] + 0,
*     (CNT = 0;
*      DECR + CNT, DECR + ADDR, : NAME)
*  ).
*
 INITODFL JP     *+1S17      INIT OUTPUT DATA FILE
*GETLPNT  BSS    0
          LISTSPNT PNT       GET LISTS PNT + PNT,
*SIMPLE FILE
          NUMZNPNT 5         X5:= NUM PNT
          IX5    X5-X.PNT    LISTS PNT = NUM PNT
          NZ,X5  TRLSTZNS    ,
          SA5    X.FILE+FILETYPE SET
          SX6    B1            SIMPLE
          LX6    SIMPBIT         BIT
          BX6    X6+X5             +
          SA6 A5 X.FILE+FILETYPE      FILE
          EQ     INITODFL    ;

 TRLSTZNS BSS    0           TREAT LIST ZONES:
          NUMZNPNT 5         NUM ZONE PNT
          IX5    X5-X.PNT
          ZR,X5  EOTRZNS     PNT = NUM ZONE PNT;
*TRLSTZN  BSS    0           TREAT LIST ZONE:
          SA5    X.PNT       ADDR * FILE ADM [PNT]
          SB.ADDR X5         -> ADDR,
          SA5    B.ADDR-B2   '<<PRE' * LIST ADM [ADDR]
          BX6    X5          ->
          SA6    X.PNT+B1    '<<PRE' * FILE ADM [PNT],
*WRTNAME  BSS    0           WRITE NAME:
          BX6    X2          SAVE
          SA6    =SSAVE      X2
          SB.ADDR B.ADDR+[]NAME ADDRESS OF NAME
          SA4    B.ADDR      LIST ADM[ADDR] -> X4
          AX4    3           EXTRACT LENGTH
          MX5    -8
          BX5    -X5*X4      + X4
          SB.CNT X5          + CNT,
 NAME     BSS    0
          BX=    1,FILE
          SA2    B.ADDR      LIST ADM [ADDR]
          MX3    0           LEVEL
          RJ     =XPUTWORD   PUTWORD,
          ZR,B.CNT EOWRNME   CNT = 0;
          SB.CNT B.CNT-B1    DECR + CNT,
          SB.ADDR B.ADDR-B1  DECR + ADDR,
          EQ     NAME

 EOWRNME  SA2    =SSAVE      RESTORE X2
*EOTRZN   BSS    0
          SX.PNT X.PNT+B2    NEXT + FILE ADM + PNT,
          EQ     TRLSTZNS

 EOTRZNS  BSS    0
          BX=    1,FILE
          SX2    0
          MX3    0
          RJ     =XPUTWORD   PUTWORD + FILE + 0 + 0
          EQ     INITODFL
          QUAL * INITODFL
 INITODFL EQU    /INITODFL/INITODFL

          SPACE  10,10
 EOOPENFL BSS    0           END OF OPEN FILE
 GETNEXT  SA.FILE X.FILE+FILECHN
          EQ     NEXTFLE
          QUAL * OPFLS
          SPACE  10,10
* PUT END OF RECORD                 ************************************
          ENTRY  PUT8ORD
 PUT8ORD  JP     *+1S17      + ""FILE + >LEVEL
          SA5    X.FILE      FILENAME
          ZR,X5  PUT8ORD     = DUMMY;
          MX6    -4
          BX6    -X6*X2      LAST FOUR BITS OF LEVEL
          BX5    X2-X6       MUST BE ZERO
          NZ,X5  BADLEVEL    OTHERWISE ERROR
          SX6    X6+B1       PARAMETER
          SA6    =SSAVE
          DOWNCPU
          SA5    X.FILE+FILETYPE
          LX5    SIGNBIT-READBIT
          NG,X5  READFL      READFILE
          LX5    READBIT-CHDATBIT
          NG,X5  DATAFILE
          RJ     =XCLOLINE
 DATAFILE SA3    SAVE        LEVEL
          RJ     =XPUTWORD
          SX6    NEWSTAT
          SA6    X.FILE+FILECH#  SET STATUS
          UPCPU
          EQ     PUT8ORD

 READFL   ERREXT (PUT END OF RECORD, NOT WHILE WRITING),F.FILE
 BADLEVEL ERREXT (PUT END OF RECORD, BAD LEVEL),(F.FILE,D2)

          END
