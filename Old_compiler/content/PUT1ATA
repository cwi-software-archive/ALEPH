
          IDENT  PUT1ATA
          SST
          ENTRY  PUT1ATA

*'ACTION' PUT DATA + ""FILE + >ITEM + >TYPE:
 FILE     =      1           X.FILE
 ITEM     =      2           X.ITEM
*  IS DUMMY + FILE;
*  (IS NOT DATA FILE + FILE; IS READ FILE + FILE),
*        ERROR + BAD FILE;
*  TYPE = POINTER, PUT DATA POINTER + ITEM;
*  PUT DATA NUMERICAL + ITEM.
*
*'ACTION' PUT DATA POINTER + >ITEM:
*  CONSTRUCT WORD + ITEM, PUT WORD + FILE + ITEM + 0.
*
*'FUNCTION' CONSTRUCT WORD + >ITEM> - PNT:
 PNT      =      3           X.PNT
*  FIND LIST BLOCK + ITEM + PNT,
*  MINUS + ITEM + '<<PRE' * FILE ADM[PNT] + ITEM $ OFFSET $,
*  (-REM: DIVREM + ITEM + '<>' * LIST ADM [ADDR * FILE ADM[PNT]]
*                + ITEM + REM, $ IN BLOCKS $
*      (REM = 0; ERROR + IMPURE POINTER)
*  ),
*  COMBINE + PNT + ITEM + ITEM.
*
*'FUNCTION' FIND LIST BLOCK + >ITEM + PNT>:
*  GET LISTS PNT + PNT,
*  (SEARCH LIST:
*    PNT = NUM ZONE PNT, ERROR + BAD POINTER;
*    IS IN LIST + PNT + ITEM;
*    NEXT + FILE ADM + PNT, : SEARCH LIST).
*
*'QUESTION' IS IN LIST + >PNT + >ITEM - ADDR:
*  BETWEEN + '<<' * LIST ADM[ADDR * FILE ADM[PNT]] +
*            '>>' * LIST ADM[ADDR * FILE ADM[PNT]].
*
*'ACTION' PUT DATA NUMERICAL + >ITEM:
*  CHECK RANGE + ITEM,
*  (IS SIMPLE FILE + FILE;
*   IS POINTER + ITEM, PUT WORD + FILE + MARKER + 0; +),
*  PUT WORD + FILE + ITEM + 0.
*
*'FUNCTION' CHECK RANGE + >ITEM - PNT:
*  NUM ZONE PNT -> PNT,
*  (SEARCH RANGES:
*    PNT = END OF ZONES PNT, ERROR + BAD NUMERICAL;
*    BETWEEN + LOWER * FILE ADM[PNT] + ITEM +
*        UPPER * FILE ADM[PNT];
*    NEXT + FILE ADM + PNT, : SEARCH RANGES).
*

 PUT1ATA  JP     *+1S17      PUT DATA + ""FILE + >DATA + >TYPE:
          SA4    X.FILE      FILE NAME
          ZR,X4  PUT1ATA     IS DUMMY + FILE;
          SA5    X.FILE+FILETYPE
          BX6    X5
          LX5    SIGNBIT-CHDATBIT POS IF NOT DATA FILE
          LX6    SIGNBIT-READBIT NEG IF READ FILE
          BX5    -X6*X5      POS IF EITHER,
          PL,X5  BADFILE     ERROR + BAD FILE;
          SB4    X3          TYPE
          NE     B4,B.POINTER,PUTNUM      = POINTER,
*PUTPNT   BSS    0           PUT DATA POINTER:
*CONSTRW  BSS    0           CONSTRUCT WORD:
*FINDBLCK BSS    0           FIND LIST BLOCK:
          LISTSPNT PNT       GET LISTS PNT + PNT,
 SEARCHL  BSS    0
          NUMZNPNT 5         NUM ZONE PNT
          IX5    X5-X.PNT                 = PNT,
          ZR,X5  BADPNT      ERROR + BAD POINTER;
*ISINLIST BSS    0
          SA5    X.PNT       ADDR * FILE ADM[PNT] -> X5,
          SA4    X5+>>       '>>' * LIST ADM[X5]
          SA5    A4-B1       '<<' * LIST ADM[X5]
          IX4    X4-X.ITEM   MUST BE POSITIVE
          IX5    X.ITEM-X5   MUST BE POSITIVE
          BX4    X4+X5       MUST BE POSITIVE
          PL,X4  EOFINDBL    IS IN LIST + PNT + ITEM;
          SX.PNT X.PNT+B2    NEXT + FILE ADM + PNT,
          EQ     SEARCHL     : SEARCH LIST.

 EOFINDBL BSS    0           X.PNT IS POINTER TO PROPER BLOCK.
          BX4    X.ITEM      FOR POSSIBLE ERROR MESSAGE
          SA5    X.PNT+B1    '<<PRE' * FILE ADM[PNT] -> X5,
          IX.ITEM X.ITEM-X5  MINUS + ITEM + X5 + ITEM,

          SA5    X.PNT       ADDR * FILE ADM [PNT] -> X5,
          SA5    X5+<>       '<>' * LIST ADM [X5] -> X5,
          BX6    X.ITEM      FOR
          BX7    X5              REMAINDER
          IX.ITEM X.ITEM/X5,B5 DIVREM + ITEM + X5 + ITEM
          IX7    X7*X.ITEM
          IX6    X6-X7       + REM,
          NZ,X6  ERRIMP      (REM = 0F ERROR + IMPURE POINTER),

          LISTSPNT 5         LISTS PNT -> X5,
          IX.PNT X.PNT-X5    MINUS + PNT + X5 + PNT,
          MX5    1           40000...0B
          LX.PNT 24          COMBINE + ITEM
          BX.ITEM X.ITEM+X.PNT              + PUT
          BX.ITEM X.ITEM+X5                       + ITEM.
          EQ     PUTW        PUTWORD + FILE + ITEM + 0.

 PUTNUM   BSS    0           PUT DATA NUMERICAL:
*CHECKRGE BSS    0           CHECK RANGE:
          NUMZNPNT PNT       NUM ZONE PNT -> PNT,
 SEARCHRG BSS    0
          EOZNSPNT 5         END OF ZONES PNT
          IX5    X5-X.PNT                     = PNT,
          ZR,X5  BADNUM      ERROR + BAD NUMERICAL;
*
*'BETWEEN' DOES A 60-BIT INTEGER COMPARE:
*
          SA4    X.PNT       LOWER * FILE ADM[PNT]
          SA5    X.PNT+B1    UPPER * FILE ADM[PNT]
          IX6    X.ITEM-X4   MUST BE POSITIVE AFTER CORRECTION:
          BX7    X.ITEM-X4   IF SIGNS ARE EQUAL,
          BX6    -X7*X6      WE NEED THE DIFFERENCE,
          BX7    X7*X.ITEM   OTHERWISE THE FIRST TERM
          BX4    X6+X7       MUST BE POSITIVE.
          IX6    X5-X.ITEM   MUST BE POSITIVE AFTER CORRECTION:
          BX7    X5-X.ITEM   IF SIGNS ARE EQUAL,
          BX6    -X7*X6      WE NEED THE DIFFERENCE,
          BX7    X7*X5       OTHERWISE THE FIRST TERM
          BX5    X6+X7       MUST BE POSITIVE
          BX4    X4+X5       MUST BE POSITIVE
          PL,X4  EOCHRNGE    BETWEEN + .... ;
          SX.PNT X.PNT+B2    NEXT + FILE ADM + PNT,
          EQ     SEARCHRG    : SEARCH RANGES.

 EOCHRNGE BSS    0           ITEM IN SOME RANGE
          SA5    X.FILE+FILETYPE IS SIMPLE FILE
          LX5    SIGNBIT-SIMPBIT                +
          NG,X5  PUTW                             FILE;
          ISNOTPNT X.ITEM,PUTW IS POINTER + ITEM,
          BX6    X.ITEM
          SA6    =SSAVE      SAVE ITEM
          BX=    1,FILE
          MX2    -11         77 ... 74000B
          LX2    -12         40007...7B
          MX3    0
          RJ     PROTPW      PUT WORD + FILE + MARKER + 0
          SA.ITEM SAVE
          BX=    1,FILE
          BX=    2,ITEM
 PUTW     MX3    0
          RJ     PROTPW      PUT WORD + FILE + ITEM + 0
          EQ     PUT1ATA     .

 PROTPW   JP     *+1S17      PROTECTED PUTWORD
          DOWNCPU
          RJ     =XPUTWORD
          UPCPU
          EQ     PROTPW

 BADFILE  ERREXT (PUT DATA, BAD FILE),F.FILE
 BADPNT   ERREXT (PUT DATA, BAD POINTER),(F.FILE,D.ITEM)
 ERRIMP   ERREXT (PUT DATA, IMPURE POINTER),(F.FILE,D4)

 BADNUM   ERREXT (PUT DATA, BAD NUMERICAL),(F.FILE,D.ITEM)
          END
