 
          IDENT  RANDOM
          SST
          ENTRY  RANDOM,R.WORD
 RANDOM   JP     *+1S17      RANDOM + >P + >Q + R>
*
* THE RANDOM NUMBER IS SQUEEZED INTO RANGE [P : Q] BY FIRST REDUCING 
* THE RANGE TO [0 : 2**N - 1] BY MASKING, AND THEN, IF THE RESULT IS 
* NOT IN THE RANGE, JUST TRY AGAIN. THIS IS CHEAPER THAN A MULTIPLY- 
* DIVIDE APPROACH, ESPECIALLY WHEN THE RANGE IS LARGER THAN 'MAX INT'.
* ON THE AVERAGE 4/3 ATTEMPTS ARE NEEDED.
* THE TECHNIQUE IS EXPLAINED BY:
*
* RANDOM + >P + >Q + R> - RANGE - SIZE:
* MINUS + Q + P + RANGE, FIRST TRUE + RANGE + SIZE,
*  (ATTEMPT - BTS: 
*   GET RANDOM BITS + SIZE + BTS $ GETS 'SIZE' RANDOM BITS IN 'BTS' $
*    (LSEQ + BTS + RANGE, PLUS + BTS + P + R;
*     : ATTEMPT)
*  ).
*
* THE ACTUAL ALGORITHM IS MESSIER BECAUSE OF POSSIBILITY OF OVERFLOW.
* THE "SIZE" IS IMPLEMENTED BY A MASK. 
*
* REGISTER ALLOCATION:  (THOSE MARKED R ARE USED BY THE BIT-SHUFFLER)
*     X1  P, R
*     X2  Q, RANGE 
*  R  X3  BTS
*  R  X4  TEMP, COPY OF RWORD
*  R  X5  TEMP, MASK FOR BIT-SHUFFLER
*  R  X6  R.WORD
*     X7  SIZE MASK
*
          SA4    R.WORD      GET LATEST BIT-WORD 
          IX2    X2-X1       MINUS+Q+P+RANGE, MAY YIELD 49-BIT RESULT
          NG     X2,ERR      (OR EVEN BE NEGATIVE)
          AX5    X2,B1       SO WE MAKE IT A 48-BIT RESULT, BUT LOSE THE
                             DIFFERENCE BETWEEN 0 AND 1. THE ALGORITHM
                             WILL WORK NEVERTHELESS, BUT A RANGE OF
                             LENGTH 0 WILL GET BAD SERVICE.
          NX5    B5          FIRST TRUE + RANGE + SIZE,
          MX7    11          AND CONSTRUCT
          AX7    B5          MASK FOR 'SIZE'.
          BX6    X4          R.WORD
 ATTEMPT  BSS    0           BIT-SHUFFLER.
*
* THIS ALGORITHM PRODUCES THE BITSTREAM DESCRIBED AND ANALYZED
* BY R.C.TAUSWORTHE, MATH. COMP. 19(1965),201-209.
* THE BITSTREAM IS GENERATED IN BACKWARD ORDER, AND IS BASED ON THE
* PRIMITIVE TRINOMIAL  X ** 60 + X ** M + 1, WITH  0 < M < 13.
* THE PRESENT VALUE OF  M  IS:
 M        EQU    1 
* BUT A BETTER VALUE MAY BE FOUND.
* THE BITSTREAM IS PRODUCED IN GROUPS OF 59 BITS.
*
          MX5    M           MASK FOR FIRST M BITS
          BX4    X6          COPY R.WORD
          LX6    60-M        SHIFT R.WORD RIGHT OVER M BITS
          BX4    -X5*X4      REMOVE FIRST M BITS FROM COPY 
          BX6    X6-X4
* END OF BIT-SHUFFLER, X6 NOW CONTAINS 59 NEW BITS
          BX3    -X7*X6      REDUCE RANGE TO 'SIZE'
          IX5    X2-X3       LSEQ + BTS
          NG     X5,ATTEMPT             + RANGE, 
          IX1    X3+X1       PLUS + BTS + P + R
          SA6    R.WORD      STORE NEW BITS
          EQ     RANDOM
 
 R.WORD   DATA   B12345670555507654321 
 
 ERR      ERREXT (RANDOM, BAD RANGE),(D1,D2)
          END
 
          IDENT  RANGE       RANGE CHECK
          SST
          ENTRY  RANGE
 RANGE    JP     *+1S17      RJ ENTRY
                             LIST ADM IN B5, OFFSET IN X5, INDEX IN X7
                             YIELDS ADDRESS IN X5
                             USES X4
          IX5    X7+X5
          SA4    B5-B3       >>
          IX4    X4-X7       MUST BE POSITIVE
          NG     X4,RANGEER
          SA4    A4+B1       <<PRE
          IX4    X4-X7       MUST BE NEGATIVE
          NG,X4  RANGE
 RANGEER  SX5    B5          LIST ADM
          ERROR  (INDEX OVERFLOW),(L5,D7)
          END
 
          IDENT  REC.VER
          SST
 
* SUPPLIES THE EXTERNALS 'CPUTRAP' AND 'CPUERR' FOR THE RECOVERY ROUTINE
 
 CPUTRAP  JP     *+1S17
          SA5    =XCPUSEMA   BITS 17-12: 0, BITS 11-0: ERROR CODE
          SX5    X5-1B
          ZR,X5  CPLIM
          SX5    X5+1B-17B
          ZR,X5  MSLIM
          SX5    X5+17B-21B
          ZR,X5  IOLIM
          ERROR  (ABORTED)
 IOLIM    ERROR  (IO TIME LIMIT)
 MSLIM    ERROR  (MASS STORAGE LIMIT)
 CPLIM    ERROR  (CP TIME LIMIT)
 
 CPUERR   =      BADSEMA
 
          QUAL   RECOVER
          RMT
 CPUSEMA  =      /RECOVER/CPUSEMA
 CPUTR.P  =      /RECOVER/CPUTR.P
          ENTRY  CPUSEMA,CPUTR.P
          RMT
 
 
 EXPSIZE  =      17D         SIZE OF EXCHANGE PACKAGE
 
 EXPACK   BSS    EXPSIZE     FOR COPY OF EXCHANGE PACKAGE
 
 CPUTR.P  JP     *+1S17      ENTERED BY SIMULATED RJ-CALL FROM RECOVER
                             OR BY RJ-CALL FROM 'UPCPU'.
          SA5    CPUSEMA     STARTS WITH EITHER 6000B OR 1777B
          PL,X5  =XCPUERR    MAY NOT BE 1777B.
          CLOSECPU 
          SA5    CPUTR.P     TRANSFER
          BX6    X5          RETURN
          SA6    =XCPUTRAP   ADDRESS.
          EQ     =XCPUTRAP+1 ENTER AS RJ.
 
*
* THE SEMAPHORE 'CPUSEMA' CONTAINS 6 FIELDS:
* BIT 59 :       INTERRUPT-PENDING BIT 
* BIT 58 - 48 :  DEPTH OF PROTECTION + 2000B
* BIT 47 :       INTERRUPT-PERMIT BIT
* BIT 46 :       RUN BIT
* BIT 35 - 18 :  ADDRESS OF EXCHANGE PACKAGE AFTER INTERRUPT
* BIT 11 - 0 :   ERROR CODE
*
 CPUSEMA  CON    2000BS48+1S47   LEVEL 0 + INTERRUPT-PERMIT
 RECOVER  JP     *+1S17      X1 = ADDRESS OF EXCHANGE PACKAGE
* THE ABOVE INSTRUCTION MUST BE AT CPUSEMA+1 !
          SB1    1           FIRST THINGS FIRST
* GET EXCHANGE PACKAGE OUT OF DANGER ZONE:
          SA5    EXPACK-1    SET
          BX6    X5               A6
          SA6    A5                  TO EXPACK-1 
          SA5    X1-1        AND A5 TO OLDEXPACK-1.
          SB5    EXPSIZE     NUMBER OF WORDS TO BE MOVED
 MOVE     SA5    A5+B1       GET WORD
          SB5    B5-B1       COUNT IT
          BX6    X5
          SA6    A6+B1       AND STORE IT.
          NZ,B5  MOVE
 
* ANALYZE STATUS:
          SA5    CPUSEMA
          LX5    59D-47D     INTERRUPT-PERMIT BIT
  SKIP
          PL,X5  RESTART     IF OFF, THEN RESTART
  ELSE
  PL,X5 MSG.RST
  RMT
 MSG.RST MESSAGE (=C/***PROTECTED/),LOCAL,R
          SA5    CPUSEMA
          LX5    59D-47D     INTERRUPT 
  EQ /RECOVER/RESTART
  RMT
  ENDIF
          LX5    47D-46D     RUN-BIT
          PL,X5  RECOVER     NO MEANINGFUL RECOVER
          LX5    46D-59D     RESTORE CPUSEMA IN X5
* CONSTRUCT NEW SEMA, OLD SEMA IN X5, ADDRESS IN A5:
          MX6    1 
          BX5    X5+X6       SET INTERRUPT-PENDING BIT
          LX6    47D-59D
          BX6    -X6*X5      CLEAR INTERRUPT-PERMIT BIT
          SA4    EXPACK      WORD 0 OF EXPACK: P, A0, ERRCODE
          SX5    X4          ERRCODE ONLY
          BX6    X6+X5       PUT ERRCODE IN BITS 17-0
          SX5 A4 EXPACK      ADDRESS EXCHANGE PACKAGE
          LX5    18D
          BX6    X6+X5       TO BITS 35 - 18.
          SA6 A5 CPUSEMA     NEW SEMA READY
*
          DF,X6  RESTART     SEMA WAS PROTECTED (SINCE NOT 6000B)
* SIMULATE AN RJ-CALL TO 'CPUTR.P', TO RESTORE ALL REGISTERS SPOILED.
* WORD 0 OF EXPACK IN X4, ITS ADDRESS IN A4.
          LX4    -36D        OLD P IN BITS 17-0
          SX6    X4          OLD P
          BX4    X4-X6       REMOVED FROM X4
          LX6    30D
          MX7    1 
          LX7    -3          040...0B
          BX6    X6+X7       'EQ OLDP' IN BITS 59-30
          SA6    CPUTR.P     TO WHERE AN RJ WOULD WRITE IT 
 
          SX6    A6+B1       CPUTR.P+1, ENTRY
          BX6    X4+X6       TO BE
          LX6    36D         THE NEW P-COUNTER,
          SA6 A4 EXPACK      TO BE RESTORED BY RESTART.
 
 RESTART  BSS    0 
          RECOVR CPUSEMA+1,200B ATTRACT ATTENTION      *****************
          RECOVR CPUSEMA+1,4B RESTART PROTECTION; RUINS ALL REGISTERS
 
          SX1    EXPACK      INPUT PARAMETER TO 'CONTINUE' 
          QUAL   CONTINUE
          BASE   D 
*
* THE FOLLOWING PIECE OF CODE ASSUMES AN EXCHANGE JUMP PACKAGE (AS
* PROVIDED BY 'RECOVR') TO BE POINTED AT BY X1 AND WILL RESTART
* THE PROGRAM ACCORDING TO THAT PACKAGE.
* THIS CODE MAY CAUSE A MODE 1 INTERRUPT IF THE PACKAGE IS NOT OKAY. 
*
 
 AREGS    =      0 
 XREGS    =      8 
 RAPLUS1  =      16
 
*
* ALL REGISTERS EXCEPT X1, B1, A0 AND P ARE RESTORED BY SIMPLY LOADING
* THEM. THE REMAINDER IS RESTORED BY EXECUTING CODE CONSTRUCTED FOR THAT
* PURPOSE.
*
* DURING THIS JUGGLING A1 CONTAINS THE ADDRESS OF THE LAST ACCESSED
* WORD IN THE EXCHANGE PACKAGE WHILE OLDA1 IS KEPT UPDATED SO THAT
* (A1)-OLDA1 IS ALWAYS THE ADDRESS OF THE EXCHANGE PACKAGE.
*
          NOREF  OLDA1,.A1
 SETA1    MACRO  VALUE       SETS A1 TO RELATIVE VALUE AND UPDATES OLDA1
 .A1      SET    VALUE-OLDA1 
          IFLT   .A1,0
 SIGN     MICRO  1,, -
 .A1      SET    -.A1
          ELSE
 SIGN     MICRO  1,, +
          ENDIF
          IFLE   .A1,1
 REG      MICRO  1,, B.
          ELSE
 REG      MICRO
          ENDIF
          SA1    A1"SIGN""REG".A1
 OLDA1    SET    VALUE
 SETA1    ENDM
 
* RESTORE CONTENTS OF RA+1 (NEED NOT BE ZERO)
          SA1    X1+RAPLUS1  GET WORD, SET A1
 OLDA1    SET    RAPLUS1     INITIALIZE
          BX6    X1
          SA6    B1          RA+1
*
 <>CODE   SET    0           SIZE OF HARD CODE GENERATED
*
* X1 IS RESTORED BY FIRST ENTERING 16 BITS THROUGH AN SX1 OPERATION
* AND THEN ENTERING 44 BITS THROUGH 4 PX1 B1 OPERATIONS. THE VALUES
* ENTERED BY B1 ARE THOSE THAT BELONG TO THE ABSOLUTE VALUE OF X1.
* THE CORRECT SIGN OF X1 IS SET BY THE SX1 OPERATION; SINCE THE PACK 
* OPERATION TAKES THE SIGN INTO ACCOUNT, X1 IS RECONSTRUCTED CORRECTLY.
*
          SETA1  XREGS+1     VALUE X1
          MX2    -15
          BX2    -X2*X1      BITS 14 - 0
          MX3    1 
          BX3    X3*X1       SIGN BIT
          LX3    17-59       TO POSITION 17.
          BX3    X2+X3       FIRST 16 BITS
          LX3    30          TO ADDRESS POSITION.
          SA4    SX1CODE     INSTRUCTION TEMPLATE
 TEMPLATE RMT
 SX1CODE  SX1    0 
          LX1    3*11        WILL BE MOVED RIGHT 3 TIMES FOR FOUR PACK'S
          LX1    11          TO OFFSET DUMMY SHIFT
 TEMPLATE RMT
          BX6    X3+X4       COMBINE INSTRUCTION WORD
 <>CODE   SET    <>CODE+1    MAKE ROOM 
          SA6    CODEAREA    AND WRITE IT.
 
          BX2    X1          X1
          AX2    60          :=
          BX1    X1-X2       ABS X1
*
          MX2    11
          LX2    11+15       BITS 25 -15
          SA4    PX1CODE     INSTRUCTION TEMPLATE
 TEMPLATE RMT
 PX1CODE  LX1    -11         MAKE ROOM FOR NEXT PACK
          SB1    2000B       BIAS BIT FOR PACK
          PX1    B1
 TEMPLATE RMT
          SB5    4           FOUR WORDS GENERATED
 <>CODE   SET    <>CODE+4    FOUR WORDS GENERATED
 X1L      BSS    0           CONSTRUCTION OF PACK INSTRUCTIONS
          BX3    X1*X2
          BX6    X4-X3       BECAUSE OF BIAS BIT 
          SA6    A6+B1       AND WRITE IT.
          SB5    B5-B1
          LX1    -11         NEXT 11 BITS
          NZ,B5  X1L
 
* GENERATE CODE FOR B1 AND A0
          MX2    -18         ADDRESS MASK
          SETA1  AREGS+1     B1
          BX3    -X2*X1      B1 SEC
          LX3    30
          SETA1  AREGS       A0, P
          AX1    18          A0
          BX4    -X2*X1      A0 SEC
          BX3    X3+X4       B1 AND A0 
          SA4    B1A0CODE
 TEMPLATE RMT
 B1A0CODE SB1    A0+0        TO PRESERVE -0
          SA0    A0+0        TO PRESERVE -0
 TEMPLATE RMT
          BX6    X3+X4       COMBINE INSTRUCTION WORD
 <>CODE   SET    <>CODE+1    MAKE ROOM 
          SA6    A6+B1       AND WRITE IT.
 
* GENERATE CODE FOR P; X1 STILL CONTAINS P
          AX1    18          P
          BX3    -X2*X1      P SEC
          LX3    30
          SA4    PCODE
 TEMPLATE RMT
 PCODE    JP     0 
 TEMPLATE RMT
          BX6    X3+X4       COMBINE INSTRUCTION WORD
 <>CODE   SET    <>CODE+1    MAKE ROOM 
          SA6    A6+B1       AND WRITE IT.
 
* RESET A7,B7 ... A2,B2
          MX1    60          B2:=
          SB2    X1-0             -0
          ECHO   ,R=(7,6,5,4,3,2)
          SETA1  AREGS+R
          SB.R   X1+B2       TO PRESERVE -0
          AX1    18
          IFGE   R,6
          SA5    X1          READ WORD POINTED AT
          BX.R   X5
          SA.R   A5          OVERWRITE IT, TO SET A_R
          ELSE
          SA.R   X1          SPOILS X_R, WHICH WAS NO GOOD ANYWAY
          ENDIF
          ENDD
 
* RESET X7 ... X2, X0
          ECHO   ,R=(7,6,5,4,3,2,0)
          SETA1  XREGS+R
          BX.R   X1
          ENDD
 
* RESET A1 (AND INVALIDATE OLDA1)
          SETA1  AREGS+1
          AX1    18
          SA1    X1
 
* RESET X1, B1, A0 AND P
          MX1    60          A0:=
          SA0    X1-0             -0
 CODEAREA BSS    <>CODE      WILL BY NOW CONTAIN ASSEMBLED CODE
 
 TEMPLATE HERE
 
          BASE   * 
          QUAL * CONTINUE
          QUAL * RECOVER
          END
 
          IDENT  RIG4EAR
          SST
          ENTRY  RIG4EAR
 RIG4EAR  JP     *+1S17      RIGHT CLEAR + >X> + >N
          ZR,X2  RIG4EAR     DUMMY, FOR N = 0
          SB5    X2
          AX1    B5          SIGN-EXTENDING RIGHT SHIFT
          MX4    1 
          SB5    B5-B1
          AX4    B5          MASK OF LENGTH N
          BX1    -X4*X1      REMOVE SIGN BITS
          EQ     RIG4EAR
          END
 
          IDENT  SET3DOM
          SST
          ENTRY  SET3DOM
 
 SET3DOM  JP     *+1S17      SETRANDOM + >N
*
* 'SETRANDOM' MAY NEVER MAKE 'R.WORD' ZERO. FURTHERMORE, SINCE THE
* BIT-SHUFFLER BEHAVES BADLY FOR STARTING VALUES THAT
* CONTAIN VERY FEW ONES, AND SINCE THE USER WILL GENERALLY 
* SPECIFY SMALL VALUES, WE HAVE TO ADD ONES, WITHOUT OBSCURING
* HIS INFORMATION. THESE CONSIDERATIONS LEAD TO THE FOLLOWING:
*
          SX6    323362B     JUST A BIT-PATTERN, 18 BITS
          SB5    X6+B1       AND MORE SO
          LX1    30          GIVE USER'S INFO DIRECT INFLUENCE
          IX6    X6+X1       ADD USER'S INFORMATION
          PX6    X6,B5       ADD ONES, MAKE ABSOLUTELY SURE X6 IS NOT 0
          SA6    =XR.WORD    STORE NEW BITS
          EQ     SET3DOM
          END
 
 
          IDENT  SET7DOM
          SST
          ENTRY  SET7DOM
 SET7DOM  JP     *+1S17      SET REAL RANDOM
          RTIME  =XR.WORD    PICK UP SOME REALLY RANDOM BITS
          SA1    =XR.WORD
          SX6    323362B     JUST A BIT PATTERN
          LX1    48          POSITION SIGNIFICANT BITS
          BX6    X1+X6       COMPOSE
          SA6    =XR.WORD    STORE NEW BITS
          EQ     SET7DOM
          END
 
          IDENT  SQRT
          SST
          ENTRY  SQRT
 SQRT     JP     *+1S17      SQUARE ROOT + >A + ROOT> + REM>:
*
* 'QUESTION' SQRT + >X + Y> + Z>:
*   GREAT EQ + X + 0   $ OTHERWISE FAILURE $,
*   (ACTUAL SQRT - Q - TEMP: 
*     0 -> Y, X -> Z, 1 -> Q,
*     (FIRST TRUE + X + TEMP, DECR + TEMP, CLEAR ELEM + TEMP + 1,
*       LEFT CLEAR + Q + TEMP,
*       (REDUCE Q: 
*         SUBTR + Z + Y + TEMP, SUBTR + TEMP + Q + TEMP,
*             RIGHT CLEAR + Y + 1,
*         (LESS + TEMP + 0; ADD + Y + Q + Y, TEMP -> Z),
*         RIGHT CLEAR + Q + 2, (Q = 0; :REDUCE Q)
*       ); +
*   ) ). 
*
* X0: Q; X1: X; X2: Y; X3: Z; X4: TEMP.
*
          SX0    B1          SET TOGGLE TO FALSE 
          NG     X1,SQRT     ^ GREAT EQ + X + 0
          MX2    0           0 -> Y
          BX3    X1          X -> Z
*         ZR     X1,SQRT     FIRST TRUE               $$$$$$$$$$$$$$$$$$
          NX1    B5                     + X
          SX4    B5-48                      + TEMP
          BX4    -X4
          IX4    X4-X0       DECR + TEMP
          BX4    -X0*X4      CLEAR ELEM + TEMP + 1
          SB5    X4          LEFT CLEAR
          LX0    B5                     + Q + TEMP
*
 REDUCEQ  IX4    X3-X2       SUBTR + Z + Y + TEMP
          IX4    X4-X0       SUBTR + TEMP + Q + TEMP
          AX2    1           RIGHT CLEAR + Y + 1 
          NG     X4,REDQ     LESS + TEMP + 0
          IX2    X2+X0       ADD + Y + Q + Y
          BX3    X4          TEMP -> Z 
 REDQ     AX0    2           RIGHT CLEAR + Q + 2 
          NZ     X0,REDUCEQ  (Q = 0; : REDUCE Q) 
*
          BX1    X2
          BX2    X3
          EQ     SQRT
          END
 
          IDENT  STA.MOD     VARIOUS STATISTICS
          SST
 
 ANN.TIM  JP     *+1S17      ANNOUNCE TIME + >IDF (IN X5)
          ENTRY  ANN.TIM
          EQ     ANN.TIM
 
 CLO.TIM  JP     *+1S17      CLOSE TIME FILE
          ENTRY  CLO.TIM
          EQ     CLO.TIM
 
          END
 
          IDENT  STATEXT     INTRODUCES CALLS OF ANN.TIM
*                            FOR ALL OR SPECIFIED ALEPH RULES
          STEXT
*
* TO TIME ALL RULES, DECLARE A MICRO 0:
*0        MICRO
* AND TO TIME SPECIFIC RULES ONLY, DECLARE MICRO'S WITH NAMES EQUAL
* TO THE NUMBERS OF THESE RULES IN THE LISTING, E.G. TO TIME RULES
* "ENTER" AND "RETRIEVE" WHICH HAVE NUMBERS 45 AND 112 RESP., DECLARE
*45       MICRO
*112      MICRO
*
          MACRO  SB6,LAB,NEWB OCCURS AT RULE ENTRY AND AT EXIT
* INSTRUCTION FIRST:
 LAB      SB.6   NEWB
* DEFINE STATUS IF NEW:
          IF     -DEF,MCSTAT,1
 MCSTAT   SET    0 
* DISTINGUISH BETWEEN ENTRY AND EXIT:
 M        MICRO  3,1, NEWB   SIGN
 .1       IFC    EQ, "M" +   ENTRY
          IFNE   MCSTAT,0,1
          ERR
 MCNUMB   MICRO  2,, LAB     RULE NUMBER
 MCSTAT   SET    1           MIDDLE
 .1       ELSE               EXIT
          IFNE   MCSTAT,2,1
          ERR
          IF     -MIC,0,1
 .2       IF     MIC,"MCNUMB"
          BX6    X5
          SX5    "MCNUMB"    RULE NUMBER
          PX5                STOP-INDICATION
          RJ     =XANN.TIM
          BX5    X6
 .2       ENDIF
 MCSTAT   SET    0           BACK TO ENTRY
 .1       ENDIF
 SB6      ENDM
*
 SA7      MACRO  NEWA        MIDDLE, PLACE FOR ACTUAL ENTRY TIMING
* INSTRUCTION FIRST
          SA.7   NEWA
* WORKS ONLY IF MCSTAT=1 AND NEWA IS B6
          IFNE   MCSTAT,1,1
 .1       SKIP
          IFC    NE, NEWA B6 ,1
 .1       SKIP
          IF     -MIC,0,1
 .2       IF     MIC,"MCNUMB"
          SX5    "MCNUMB"
          RJ     =XANN.TIM
 .2       ENDIF
 MCSTAT   SET    2           EXIT
 .1       ENDIF
 SA7      ENDM
*
*
          END
 
          IDENT  STR4LEM     ALEPH EXTERNAL RULE 
          SST
          ENTRY  STR4LEM
 STR4LEM  JP     *+1S17      STRING ELEM + TEXT[] + >P + >N + C>:
* ASSIGNS THE N'TH CHARACTER IN (TEXT,P) TO C.
          MX0    1           SUCCESS NOT SURE
          NG     X3,STR4LEM  N >= 0
          MUSTBE X1,X2,(STRING ELEM, BAD STRING POINTER)
          SA4    X1          OFFSET
          BX6    X4          KEEP A COPY
          IX4    X2+X4       ADDRESS OF LAST WORD
          SA4    X4          LAST WORD 
          MX5    -11
          BX5    -X5*X4      LENGTH IN CHARACTERS
          IX4    X3-X5       N-LENGTH
          PL     X4,STR4LEM  MUST BE NEGATIVE
          MX0    0           CHARACTER PRESENT
          AX5    3           LENGTH IN WORDS - 1 
          IX2    X2-X5       POINTER TO FIRST WORD
          MUSTBE X1,X2,(STRING ELEM, BAD STRING) 
          IX2    X2+X6       ADDRESS OF FIRST WORD
          LX3    -3
          SB5    X3          N '/' 8
          SA4    X2+B5       WORD CONTAINING CHARACTER SOUGHT
          MX5    3 
          BX3    X5*X3
          LX3    3           N - N '/' 8 * 8
          SX3    X3+B1                      + 1
          LX5    X3,B3       B5 :=
          IX3    X5-X3             7 * 
          SB5    X3                    X3
          LX4    B5          RIGHT CHARACTER AT LOWER END
          MX5    -7
          BX1    -X5*X4      RESULT
          EQ     STR4LEM     RETURN
          END
 
          IDENT  STR6GTH
          SST
          ENTRY  STR6GTH
 STR6GTH  JP     *+1S17      STRING LENGTH + TEXT[] + >P + N>:
* EXTRACTS LOWER 11 BITS FROM LAST WORD OF STRING
          MUSTBE X1,X2,(STRING LENGTH, BAD STRING POINTER) 
          SA1    X1          GET OFFSET
          IX1    X1+X2       ADDRESS OF LAST WORD
          SA3    X1          LAST WORD 
          MX2    -11
          BX1    -X2*X3      GET BITS
          EQ     STR6GTH     RETURN
          END
 
          IDENT  TEMPIES     PARAMETER OVERFLOW AREA
*
 TEMPIES  BSS    20
          ENTRY  TEMPIES
          END
 
          IDENT  TIME
          SST
          ENTRY  TIME
 TIME     JP     *+1S17      'FUNCTION' TIME + N>
          TIME   =SSTATUS
          SA1    STATUS      GET RESULT
          MX2    -36
          BX3    -X2*X1      LEAVE RIGHT-MOST 36 BITS
          MX2    -12
          BX2    -X2*X3      MILLI-SECONDS, M
          AX3    12          SECONDS, S
          SX4    1000D
          IX1    X3*X4       1000 * S
          IX1    X1+X2       1000 * S + M
          EQ     TIME
          END
 
          IDENT  TOA1CII
          SST
          ENTRY  TOA1CII
 TOA1CII  JP     *+1S17      FROM DISPAY CODE TO ASCII
          SX2    71B         QUESTION MARK
          SX3    TABLE
          RJ     =XCONV;
          SX1    X1+32       RELOCATE
          EQ     TOA1CII
 
 TABLE    DATA   0703172570605037B
          DATA   3773102671615141B
          DATA   3475112772625242B
          DATA   3632043020635343B
          DATA   4002353121645444B
          DATA   7477001322655545B
          DATA   7601141523665646B
          DATA   3306161224675747B
 
          END
 
          IDENT  UNP4OOL
          SST
          ENTRY  UNP4OOL
 WORD     BSS    1 
 
 UNP4OOL  JP     *+1S17      UNPACK BOOL + >WORD + []ST[]: 
          BX6    X1
          SA6    WORD        SAVE WORD 
          BX1    X2
          SX2    WORDSIZE
          EXTEND12 
          BX2    X1          STACK @
          SA1    WORD
          SA4    X2+>>
          SA5    X2          OFFSET
          IX3    X4+X5       @(>>LIST) 
          SX3    X3-WORDSIZE @(>>LIST)-WORDSIZE
          SB5    WORDSIZE-1  COUNT,SHIFT
          MX4    -1          -1
 UNP1     SX3    X3+B1
          AX5    X1,B5       GET RIGHT BIT
          BX6    -X4*X5
          SA6    X3          STORE
          SB5    B5-B1       COUNT
          GE     B5,B0,UNP1
          EQ     UNP4OOL
          END
 
          IDENT  UNP8AME     'ACT' UNPACK FILE NAME + ''F + [](S)S[]:
          SST
          ENTRY  UNP8AME
 UNP8AME  JP     *+1S17      X1 = FILE @, X2 = STACK @
          SA1    X1          FILE NAME + BITS
          SX6    X1          BITS,
          BX6    X1-X6       FILE NAME ONLY
          SX1    X2          STACK ADDRESS, FOR REPEATED EXTENDS
          SA6    NAME
          SA3    NAME
 
 LOOP     BSS    0           FILE NAME IN X3, ITS ADDRESS IN A3
          LX3    6           NEXT CHAR FROM NAME 
          SX7    X3          CHAR ONLY 
          BX6    X3-X7       REMOVE FROM NAME
          SA6    A3          RESTORE NAME
          SA7    CHAR        SAVE CHAR 
          SX2    B1          SIZE OF EXTEND
          ZR,X7  RETURN      IF NO MORE CHARS
          EXTEND12           EXTEND STACK WITH ONE WORD
          SA4    X1          OFFSET
          SA5    X1+>>
          IX5    X4+X5       ADDRESS TOP OF STACK
          SA4    CHAR
          BX6    X4
          SA6    X5          WRITE TO TOP OF STACK
          SA3    NAME        PICK UP NAME AGAIN
          EQ     LOOP        AND START OVER.
 
 RETURN   =      UNP8AME
 
 NAME
 CHAR
          END
 
          IDENT  UNP3INT
          SST
          ENTRY  UNP3INT
 UNP3INT  JP     *+1S17      UNPACK INT + >INT + []ST[]:
          SB5    X2
          BX2    X1
          SX1    B5          EXCHANGE X1 AND X2
          RJ     =XINT.CHR   CONVERT INTEGER
          SX2    INTSIZE
          EXTEND12 
          SA2    X1+>>       TOP
          SA3    X1          OFFSET
          IX3    X2+X3       ACTUAL TOP ADDRESS
          SA5    X3-INTSIZE  OLD TOP
          BX6    X5
          SA6    A5          SET A6
*DIGITS
          SB5    -INTSIZE    COUNTER
          SA3    INT.CHR-4   WORD
          MX2    -4
          LX3    4           RIGHT-ALIGH FIRST CHAR
 DIGITS   BX6    -X2*X3      CHAR
          SA6    A6+B1       WRITE
          LX3    4           NEXT
          SB5    B5+B1       COUNT
          NG,B5  DIGITS
          EQ     UNP3INT
          END
 
          IDENT  UNP6ING     ALEPH EXTERNAL RULE 
          SST
          ENTRY  UNP6ING
 UNP6ING  JP     *+1S17      UNPACK STRING + FROM[] + >P + []TO[]:
* UNPACKS THE STRING 'FROM,N' INTO 'TO'
          MUSTBE X1,X2,(UNPACK STRING, BAD STRING POINTER) 
          SA4    X1          OFFSET
          IX4    X4+X2       ADDRESS OF LAST WORD
          SA4    X4          LAST WORD 
          MX5    -11
          BX4    -X5*X4      LENGTH IN CHARACTERS
          BX6    X4          WHICH
          SA6    =XALF.SC1+2       SAVE
          AX4    3           LENGTH IN WORDS - 1 
          IX2    X2-X4       POINTER TO FIRST WORD
          MUSTBE X1,X2,(UNPACK STRING, BAD STRING)
          BX4    X6          LENGTH IN CHARACTERS
          BX6    X2          POINTER TO FIRST WORD
          SA6    A6-B1       STORE
          BX6    X1          ADDRESS OF 'FROM'
          SA6    A6-B1       STORE
          SX1    X3          STACK TO BE EXTENDED
          BX2    X4          LENGTH
          EXTEND12 
*
*  X1:     ADDRESS OF 'TO'
*  X4/A4:  READING REGISTER
*  X5:     SEVEN-BITS MASK
*  X6/A6:  WRITING REGISTER
*  B4:     COUNTER OVER PACKED WORDS
*  B5:     SHIFT COUNTER
*
          SA2    X1          OFFSET OF 'TO'
          SA3    X1+>>       >>TO
          IX2    X2+X3       ADDRESS OF RIGHT-MOST WORD
          SA3    =XALF.SC1+2 LENGTH
          IX2    X2-X3       ADDRESS OF LAST WORD FILLED
          SA5    X2
          BX6    X5
          SA6    A5          A6:= ADDRESS OF LAST WORD FILLED
          SA2    A3-B1       POINTER TO FIRST PACKED WORD
          SA1    A2-B1       ADDRESS OF 'FROM'
          SA1    X1          OFFSET
          IX2    X2+X1       ADDRESS OF FIRST WORD
          SA4    X2          LOAD FIRST WORD
          MX5    -7          MASK
          AX3    3           NUMBER OF PACKED WORDS - 1
          SB4    X3          COUNTER
          ZR     B4,LAST     PERHAPS NO FULL WORD
 WRDL     SB5    8           SHIFT COUNT
 CHRL     LX4    7           NEXT CHARACTER
          BX6    -X5*X4      GET IT
          SA6    A6+B1       AND WRITE;
          SB5    B5-B1       COUNT DOWN
          NZ     B5,CHRL
          ZR     B4,UNP6ING  WAS THIS THE LAST WORD?
          SA4    A4+B1       IF NOT, GET THE NEXT ONE
          SB4    B4-B1       COUNT IT
          NZ     B4,WRDL     IS IT GOING TO BE THE LAST WORD?
 LAST     MX2    -3          IF SO, EXTRACT ITS LENGTH
          BX2    -X2*X4
          SB5    X2          MAKE IT THE COUNT
          NZ     B5,CHRL     AND IF THERE IS SOMETHING TO BE DONE,
                             RESTART THE LOOP WITH B4 = 0
          EQ     UNP6ING
          END
 
          IDENT  UNQ1EUE
          SST
          ENTRY  UNQ1EUE
 UNQ1EUE  JP     *+1S17      UNQUEUE + []ST[]
          SA4    X1+<<       <<
          SA5    A4+B1       >>
          IX3    X5-X4
          PL     X3,UNQ1     STACK NOT EMPTY
          ERREXT (UNQUEUE, STACK EMPTY),L1
 
 UNQ1     SA5    A4-B1       <>
          IX6    X4+X5       RESTORE <<
          BX7    X4          <<PRE
          SINGLE (\  SA6 A4\  SA7 A4+B2)
          EQ     UNQ1EUE
          END
 
          IDENT  UNQ3ETO
          SST
          ENTRY  UNQ3ETO
 UNQ3ETO  JP     *+1S17      UNQUEUE TO + []ST[] + >PNT
          SA3    X1+>>       >>
          SA4    A3-B1       <<
          SA5    A4-B1       <>
          IX3    X3+X5       MAXIMUM PERMISSIBLE 
          IX3    X3-X2       MUST BE POSITIVE
          IX6    X2-X4       MUST BE POSITIVE
          BX6    X3+X6       MUST BE POSITIVE
          NG,X6  BADPNT
 REP      IX6    X4-X2       COMPARE PROPOSED POINTER TO PNT
          IX4    X4+X5       PROPOSE NEW POINTER 
          NG,X6  REP
          NZ,X6  BADPNT      MUST HAVE HIT PNT EXACTLY
          IX6    X4-X5       CORRECT OVERSHOOT, <<
          IX7    X6-X5       <<PRE
          SINGLE (\  SA6 A4\  SA7 A4+B2)
          EQ     UNQ3ETO
 
 BADPNT   ERREXT (UNQUEUE TO, BAD POINTER),(L1,D2)
 
          END
 
          IDENT  UNS1ACK
          SST
          ENTRY  UNS1ACK
 UNS1ACK  JP     *+1S17      UNSTACK + []ST[]:
          SA4    X1+<<       <<
          SA5    A4+B1       >>
          IX3    X5-X4
          PL     X3,UNS1     STACK NOT EMPTY
          ERREXT (UNSTACK, STACK EMPTY),L1
 
 UNS1     SA4    A5-B2       <>
          IX6    X5-X4
          SA6    A5          >>
          EQ     UNS1ACK
          END
 
          IDENT  UNS7ING     ALEPH EXTERNAL RULE 
          SST
          ENTRY  UNS7ING
 UNS7ING  JP     *+1S17      UNSTACK STRING + []ST[]:
* UNSTACKS THE STRING ON TOP OF 'ST'
          SA2    X1+<<       X2:= <<
          SA3    A2+B1       X3:= >>
          IX4    X3-X2       LENGTH OF STACK IN WORDS - 1
          SA1    X1          OFFSET
          NG,X4  EMPTY       MUST NOT BE NEGATIVE
          IX5    X1+X3       ADDRESS OF LAST WORD
          SA5    X5          LAST WORD 
          MX1    -11
          BX5    -X1*X5      LENGTH IN CHARACTER 
          AX5    3           LENGTH IN WORDS - 1 
          IX4    X4-X5       LENGTH OF STACK AFTER REMOVAL OF STRING 
          NG,X4  BADSTR
          MX1    -1          -1
          IX5    X5-X1       LENGTH OF STRING IN WORDS
          IX6    X3-X5       NEW >>
          SA6    A3
          EQ     UNS7ING
 
 EMPTY    ERREXT (UNSTACK STRING, EMPTY STACK),L1
 BADSTR   ERREXT (UNSTACK STRING, BAD STRING),L1 
          END
 
          IDENT  UNS3KTO
          SST
          ENTRY  UNS3KTO
 
 OUT      IX6    X3+X5       CORRECT OVERSHOOT
          SA6    A3          >>
 
 UNS3KTO  JP     *+1S17      UNSTACK TO + []ST[] + >PNT
          SA3    X1+>>       >>
          SA4    A3-B1       <<
          SA5    A4-B1       <>
          IX4    X4-X5       MINIMUM PERMISSIBLE 
          IX4    X2-X4       MUST BE POSITIVE
          IX6    X3-X2       MUST BE POSITIVE
          BX6    X4+X6       MUST BE POSITIVE
          NG,X6  BADPNT
 REP      IX6    X2-X3       COMPARE TO PROPOSED PNT
          IX3    X3-X5       PROPOSE NEW POINTER 
          NG,X6  REP
          ZR,X6  OUT         MUST HAVE HIT PNT EXACTLY
 
 BADPNT   ERREXT (UNSTACK TO, BAD POINTER),(L1,D2)
          END
 
          IDENT  X2CHECK     X2 CHECKS FOR SHIFTS
          SST
          ENTRY  X2<
 X2<      JP     *+1S17      CHECKS IF 0 <= X2 < WORDSIZE
*         SX2    X2          MUST BE POSITIVE
          SX5    X2-WORDSIZE MUST BE NEGATIVE
          BX5    -X2*X5      MUST BE NEGATIVE
          NG,X5  X2<
          EQ     ERR
 
          ENTRY  X2<=
 X2<=     JP     *+1S17      CHECKS IF 0 <= X2 <= WORDSIZE 
*         SX2    X2          MUST BE POSITIVE
          SX5    X2-WORDSIZE-1 MUST BE NEGATIVE
          BX5    -X2*X5      MUST BE NEGATIVE
          NG,X5  X2<=
 ERR      ERROR  (BAD SHIFT VALUE),D2
          END
 
          IDENT  ZNBNDS      ZONE BOUNDS
          SST
          ENTRY  ZNBNDS
 ZNBNDS   JP     *+1S17      RJ ENTRY
* + >X1 # LWB + >X2 # UPB + >B4 # OFFSET ON STACK + >B5 #FALSE @
          SA3    B6-B4
          IX4    X3-X1       MUST BE POSITIVE
          IX5    X2-X3       MUST BE POSITIVE
          BX5    X4+X5       MUST BE POSITIVE
          PL,X5  ZNBNDS
          JP     B5
          END


