NEST:: DECSETY.
DECSETY:: DECS; EMPTY.
DECS:: DEC; DECS DEC.
DEC:: DESCR TAG.
DESCR:: STACK; NONSTACK.
NONSTACK:: KIND; RULE; EXTERNAL.
KIND:: CONSTANT; VARIABLE; TABLE; FILE.
DEF:: TACK; constant; variable; rule; file; EXTERN.
TACK:: table; stack.
EXTERN:: external TYPE EFFECT rule; external table; external constant.
EMPTY:: .
TAG:: LETTER; TAG LETTER; TAG DIGIT.
LETTER:: letter ALPHA.
ALPHA:: a; b; c; d; e; f; g; h; i; j; k; l; m; n; o; p; q; r; s;
	t; u; v; w; x; y; z.
DIGIT:: digit zero; digit one; digit two; digit three; digit four;
	digit five; digit six; digit seven; digit eight; digit nine.
TAG LETTER: TAG, LETTER.
TAG DIGIT: TAG, DIGIT.
letter ALPHA: ALPHA symbol.
digit zero: zero symbol.
digit one: one symbol.
digit two: two symbol.
digit three: three symbol.
digit four: four symbol.
digit five: five symbol.
digit six: six symbol.
digit seven: seven symbol.
digit eight: eight symbol.
digit nine: nine symbol.
program:
	where NEST is NEST1 NEST2,
	NEST info sequence with NEST1,
	NEST root,
	NEST info sequence with NEST2,
	end symbol.
NEST info sequence with EMPTY:
	EMPTY.
NEST info sequence with NEST1:
	NEST pragmat,
	NEST info sequence with NEST1.
NEST info sequence with NEST1 DECS:
	NEST DEF declaration of DECS,
	NEST info sequence with NEST1.
NEST root:
	root symbol,
	NEST new EMPTY TYPE EFFECT NOREQ affix form,
	point symbol.
NOREQ:: req form EMPTY req loc EMPTY.
RULE:: TYPE EFFECT with PARAMSETY rule.
TYPE:: fallible; infallible.
EFFECT:: side; nonside.
NEST rule declaration of TYPE EFFECT with PARAMSETY rule TAG:
	TYPE EFFECT typer,
	NEST TYPE EFFECT with PARAMSETY rule TAG defining identifier,
	new FORMALSETY REQ PARAMSETY formals sequence,
	NEST new FORMALSETY inaccessible compound TYPE EFFECT
	label TAG LOCALSETY TYPE EFFECT REQ actual rule,
	point symbol.
fallible nonside typer:
	question symbol.
fallible side typer:
	predicate symbol.
infallible nonside typer:
	function symbol.
infallible side typer:
	action symbol.
LF:: new FORMALSETY; LF BLOCK.
RULEBODY:: alternative series; classification.
NEST LF BLOCK TYPE EFFECT REQ actual rule:
	BLOCK local part,
	NEST LF BLOCK TYPE EFFECT REQ RULEBODY,
	where no doubles in LF BLOCK.
NEST LF TYPE EFFECT REQ alternative series:
	NEST LF TYPE1 TYPE2 EFFECT1 REQ1 alternative,
	NEST LF1 TYPE1 TYPE3 EFFECT2 REQ2 body tail,
	where EFFECT EFFECT1 EFFECT2 holds,
	where TYPE TYPE2 TYPE3 holds,
	( LF REQ ) alternative split ( REQ1 ) ( LF1 REQ2 ).
NEST LF TYPE TYPE nonside NOREQ body tail:
	EMPTY.
NEST LF fallible TYPE EFFECT REQ body tail:
	semicolon symbol,
	NEST LF EFFECT REQ alternative series.
NEST LF TYPE TYPE1 EFFECT REQ alternative:
	where TYPE1 in infallible,
	NEST LF1 TYPE EFFECT REQ LASTMEMBER,
	where last block in LF is accessible in LF1;
	NEST LF TYPE EFFECT1 REQ1 MEMBER,
	NEST LF1 TYPE1 EFFECT2 REQ2 alternative tail,
	where EFFECT EFFECT1 EFFECT2 holds,
	( LF REQ ) member split ( REQ1 ) ( LF1 REQ2 ).
NEST LF TYPE EFFECT REQ alternative tail:
	comma symbol,
	NEST LF TYPE1 TYPE2 EFFECT REQ alternative,
	where TYPE TYPE1 TYPE2 holds.
where last block in LF inaccessible compound LABELETY LOCALSETY
is accessible in LF accessible compound LABELETY LOCALSETY:
	EMPTY.
( LF req form FORMSETY req loc LOCALSETY ) alternative split
( req form FORMSETY req loc LOCALSETY1 ) ( LF req form FORMSETY
req loc LOCALSETY2 ):
	where LOCALSETY is permutation of LOCALSETY1 LOCALSETY2.
MEMBIX:: member; affix.
( LF req form FORMSETY req loc LOCALSETY ) MEMBIX split
( req form FORMSETY1 req loc LOCALSETY1 ) ( LF1 req form FORMSETY2
req loc LOCALSETY2 ):
	where FORMSETY is permutation of FORMSETY1 FORMSETY2,
	where LOCALSETY is permutation of LOCALSETY1 LOCALSETY2,
	where LF1 is MEMBIX equivalent with LF dot FORMSETY1
	dot LOCALSETY1.
where no doubles in LF local INIT TAG:
	where TAG not in LF,
	where no doubles in LF.
where no doubles in LF COMPOUND TYPE EFFECT label TAG:
	where TAG not in LF.
where TAG not in new EMPTY:
	EMPTY.
where TAG not in LF local INIT TAG1:
	unless TAG is TAG1,
	where TAG not in LF.
where TAG not in LF COMPOUND TYPE EFFECT label TAG1:
	unless TAG is TAG1,
	where TAG not in LF.
where TAG not in new FORMALSETY formal INIT TAG1:
	unless TAG in TAG1,
	where TAG not in new FORMALSETY.
TEF:: TYPE; EFFECT.
where TEF TEF1 TEF2 holds:
	where TEF is TEF1,
	where TEF is TEF2;
	where TEF is fallible or TEF is side,
	unless TEF1 is TEF2.
REQ:: req form FORMSETY req loc LOCALSETY.
FORMSETY:: FORMS; EMPTY.
FORMS:: FORM; FORMS FORM.
FORM:: formal uninit TAG.
OBJECTSETY:: OBJECTS; EMPTY.
OBJECTS:: FIELDS; LOCALS; FORMALS.
OBJECT:: FIELD; LOCAL; FORMAL.
where OBJECTSETY1 OBJECT OBJECTSETY2 is permutation of
OBJECTSETY3 OBJECT:
	where OBJECTSETY1 OBJECTSETY2 is permutation of
	OBJECTSETY3.
where EMPTY is permutation of EMPTY:
	EMPTY.
where NOTION1 init local TAG NOTION2 is member equivalent with
NOTION3 uninit local TAG NOTION4 dot FORMSETY dot LOCALSETY
uninit local TAG:
	where NOTION1 NOTION2 is member equivalent with
	NOTION3 NOTION4 dot FORMSETY dot LOCALSETY.
where NOTION1 formal init TAG NOTION2 is member equivalent with
NOTION3 formal uninit TAG NOTION4 dot FORMSETY formal uninit
TAG dot LOCALSETY:
	where NOTION1 NOTION2 is member equivalent with
	NOTION3 NOTION4 dot FORMSETY dot LOCALSETY.
where NOTION is MEMBIX equivalent with NOTION dot EMPTY dot EMPTY:
	EMPTY.
where NOTION1 halfinit local TAG NOTION2 is affix equivalent with
NOTION3 uninit local TAG NOTION4 dot FORMSETY dot
uninit local TAG:
	EMPTY.
where NOTION1 formal halfinit TAG NOTION2 is affix equivalent with
NOTION3 formal uninit TAG NOTION4 dot formal uninit
TAG dot EMPTY:
	EMPTY.
MEMBER:: affix form;
	compound member;
	OPERATION.
LASTMEMBER:: MEMBER;
	TERMINATOR.
LF:: new FORMALSETY;
	LF BLOCK.
FORMALSETY:: FORMALS; EMPTY.
FORMALS:: FORMAL; FORMALS FORMAL.
FORMAL:: FDESCR TAG.
FDESCR:: formal file; formal INIT; formal FIELDS table;
	formal FIELDS stack.
FDESCR TAG FORMALSETY req form FORMSETY FORMSETY1 req loc EMPTY
PARAM PARAMSETY formals sequence:
	formal affix symbol,
	FDESCR TAG req form FORMSETY req loc EMPTY PARAM formal,
	FORMALSETY req form FORMSETY1 req loc EMPTY PARAMSETY
	formals sequence.
formal file TAG NOREQ file parameter formal:
	quote image,
	formal file TAG defining identifier.
formal init TAG NOREQ in parameter formal:
	right symbol,
	formal init TAG defining identifier.
formal uninit TAG req form formal uninit TAG req loc EMPTY
out parameter formal:
	formal uninit TAG defining identifier,
	right symbol.
formal init TAG NOREQ inout parameter formal:
	right symbol,
	formal init TAG defining identifier,
	right symbol.
formal FIELDS table TAG NOREQ table CAL parameter formal:
	FIELDS list of table TAG, formal FIELDS table TAG defining identifier,
	sub bus,
	where FIELDS has calibre CAL.
formal FIELDS stack TAG NOREQ stack CAL parameter formal:
	sub bus,
	FIELDS list of stack TAG, formal FIELDS stack TAG defining
	identifier, sub bus,
	where FIELDS has calibre CAL.
sub bus:
	sub symbol,
	bus symbol.
FDESCR TAG defining identifier:
	TAG.
where FIELDSETY FIELD has calibre CALETY i:
	where FIELDSETY has calibre CALETY.
where EMPTY has calibre EMPTY:
	EMPTY.
BLOCKSETY:: BLOCKS; EMPTY.
BLOCKS:: BLOCK; BLOCKS BLOCK.
BLOCK:: COMPOUND LABELETY LOCALSETY.
COMPOUND:: ACCESS compound.
ACCESS:: accessible; inaccessible.
LABELETY:: LABEL; EMPTY.
LABEL:: TYPE EFFECT label TAG.
LOCALSETY:: LOCALS; EMPTY.
LOCALS:: LOCAL; LOCALS LOCAL.
LOCAL:: local INIT TAG.
INIT:: init; halfinit; uninit.
inaccessible compound EMPTY EMPTY local part:
	EMPTY.
inaccessible compound LABEL LOCALSETY local part:
	LOCALSETY local part tail.
inaccessible compound EMPTY LOCALS local part tail:
	LOCALS local part tail.
EMPTY local part tail:
	colon symbol.
local uninit TAG LOCALSETY local part tail:
	minus symbol, local TAG defining identifier,
	LOCALSETY local part tail.
local TAG defining identifier:
	TAG.
OPERATION:: transport; identity; extension.
NEST LF infallible EFFECT REQ transport:
	NEST LF source,
	NEST LF EFFECT REQ destination sequence with PARAMS,
	where PARAMS is correct for destinations.
NEST LF source:
	NEST LF nonside NOREQ form with in parameter.
NEST LF fallible nonside NOREQ identity:
	NEST LF source,
	equals symbol,
	NEST LF source.
NEST LF infallible side NOREQ extension:
	of symbol,
	NEST LF FIELDS field transport list,
	of symbol,
	NEST LF FIELDS stack TAG applied identifier.
NEST LF FIELDS field transport list:
	NEST LF FIELDS1 field transport,
	NEST LF FIELDSETY2 field transport list tail,
	where FIELDS is permutation of FIELDS1 FIELDSETY2.
NEST LF EMPTY field transport list tail:
	EMPTY.
NEST LF FIELDSETY FIELDS field transport list tail:
	comma symbol,
	NEST LF FIELDSETY FIELDS field transport list.
NEST LF FIELDS field transport:
	NEST LF source,
	FIELDS field destination sequence.
FIELDSETY FIELD field destination sequence:
	to token, FIELD tag,
	FIELDSETY field destination sequence.
EMPTY field destination sequence:
	EMPTY.
SELECTORSETY1 selector TAG SELECTORSETY2 field tag:
	TAG.
to token:
	minus symbol,
	right symbol.
where PARAMSETY out parameter is correct for destinations:
	where PARAMSETY is correct for destinations.
where EMPTY is correct for destinations:
	EMPTY.
AFFIX:: actual affix; destination.
PARAMSETY:: PARAMS; EMPTY.
PARAMS:: PARAM; PARAMS PARAM.
PARAM:: in parameter; out parameter; inout parameter;
	file parameter; table CAL parameter;
	stack CAL parameter.
NEST LF TYPE EFFECT REQ affix form:
	NEST global TYPE EFFECT1 with PARAMSETY rule TAG applied
	identifier,
	NEST LF EFFECT2 REQ actual affix sequence with PARAMSETY,
	where EFFECT EFFECT1 EFFECT2 holds.
NEST LF EFFECT REQ AFFIX sequence with PARAM PARAMSETY:
	NEST LF EFFECT1 REQ1 AFFIX sequence with PARAM,
	NEST LF1 EFFECT2 REQ2 AFFIX sequence with PARAMSETY,
	where EFFECT EFFECT1 EFFECT2 holds,
	( LF REQ ) affix split ( REQ1 ) ( LF1 REQ2 ).
NEST LF EFFECT REQ AFFIX sequence with PARAM:
	AFFIX symbol,
	NEST LF EFFECT REQ form with PARAM.
NEST LF nonside NOREQ AFFIX sequence with EMPTY:
	EMPTY.
NEST LF side NOREQ form with out parameter:
	NEST global variable TAG applied identifier;
	NEST LF out stack element.
NEST LF nonside NOREQ form with out parameter:
	LF FORLOC TAG out direct identifier;
	dummy symbol.
NEST LF nonside req form formal uninit TAG req loc EMPTY
form with out parameter:
	LF formal TAG out direct identifier.
NEST LF nonside req form EMPTY req loc local uninit TAG
form with out parameter:
	LF local TAG out direct identifier.
NEST LF nonside NOREQ form with file parameter:
	NEST LF file TAG applied identifier.
NEST LF nonside NOREQ form with in parameter:
	NEST global CONSTABLE TAG applied identifier;
	PLAIN denotation;
	NEST LF TACK LIMIT;
	NEST LF in TACK element;
	LF FORLOC TAG in direct identifier.
CONSTABLE:: CONSTANT; VARIABLE.
TACK:: table; stack.
NEST LF side NOREQ form with inout parameter:
	NEST global variable TAG applied identifier;
	NEST LF inout stack element.
NEST LF nonside NOREQ form with inout parameter:
	LF FORLOC TAG inout direct identifier.
NEST LF nonside NOREQ form with TACK CAL parameter:
	NEST LF FIELDS TACK1 TAG applied identifier,
	where TACK is TACK1 or TACK1 is stack,
	where FIELDS has calibre CAL.
NEST LF INOUT INDIR TACK element:
	FIELDS selection option,
	NEST LF FIELDS TACK TAG applied identifier,
	sub symbol,
	NEST LF INOUT index,
	bus symbol,
	where INDIR is index or TACK is stack
	or INOUT is in.
FIELDSETY1 SELECTORSETY1 selector TAG SELECTORSETY2
FIELDSETY2 selection:
	TAG, of symbol.
INDIR:: index; direct.
INOUT:: in; inout; out.
INIT:: init; halfinit; uninit.
NEST LF INOUT index:
	NEST global CONSTABLE TAG applied identifier;
	PLAIN denotation;
	NEST LF TACK LIMIT;
	NEST LF INOUT index TACK element;
	LF FORLOC TAG INOUT index identifier.
LF FORLOC TAG INOUT INDIR identifier:
	LF FORLOC init TAG applied identifier;
	where INOUT is out,
	LF FORLOC halfinit TAG applied identifier;
	where INOUT is out and INDIR is direct,
	LF FORLOC uninit TAG applied identifier.
NOTION1 FORLOC INIT TAG NOTION2 FORLOC INIT TAG applied identifier:
	TAG.
TERMINATOR:: failure; success; exit; jump.
NEST LF fallible nonside NOREQ failure:
	failure symbol.
NEST LF infallible nonside NOREQ success:
	success symbol.
NEST LF infallible side req form FORMSETY req loc EMPTY exit:
	exit symbol,
	NEST free expression.
NEST LF TYPE EFFECT NOREQ jump:
	repeat symbol,
	LF label TYPE EFFECT label TAG applied identifier,
	where TAG is permitted in LF.
LF BLOCKSETY1 COMPOUND TYPE EFFECT label TAG LOCALSETY BLOCKSETY2
label TYPE EFFECT label TAG applied identifier:
	TAG.
where TAG is permitted in LF LOCALSETY:
	where TAG is permitted in LF.
where TAG is permitted in LF accessible compound TYPE EFFECT
label TAG1:
	where TAG is TAG1;
	where TAG is permitted in LF.
where TAG is permitted in LF accessible compound EMPTY:
	where TAG is permitted in LF.
NEST LF TYPE EFFECT REQ compound member:
	open symbol,
	BLOCK TYPE EFFECT label addition,
	NEST LF BLOCK TYPE EFFECT REQ actual rule,
	close symbol.
inaccessible compound EMPTY LOCALSETY TYPE EFFECT label addition:
	EMPTY.
inaccessible compound TYPE EFFECT label TAG LOCALSETY
TYPE EFFECT label addition:
	TAG.
NEST LF TYPE EFFECT REQ classification:
	NEST LF class box,
	NEST LF TYPE EFFECT REQ class series.
NEST LF class box:
	box symbol,
	NEST LF source,
	box symbol.
NEST LF TYPE EFFECT REQ class series:
	NEST LF TYPE1 TYPE2 EFFECT1 REQ1 class,
	NEST LF1 TYPE1 TYPE3 EFFECT2 REQ2 class series tail,
	where TYPE TYPE2 TYPE3 holds,
	where EFFECT EFFECT1 EFFECT2 holds,
	( LF REQ ) alternative split ( REQ1 ) ( LF REQ2 ).
NEST LF type infallible nonside NOREQ class series tail:
	EMPTY.
NEST LF fallible TYPE EFFECT REQ class series tail:
	semicolon symbol,
	NEST LF TYPE EFFECT REQ class series.
NEST LF TYPE TYPE1 EFFECT REQ class:
	NEST TYPE area addition,
	NEST LF TYPE2 TYPE3 EFFECT REQ alternative,
	where TYPE1 TYPE2 TYPE3 holds.
NEST infallible area addition:
	EMPTY.
NEST fallible area addition:
	NEST area,
	comma symbol.
NEST area:
	sub symbol,
	NEST zone series,
	bus symbol.
NEST zone series:
	NEST zone,
	NEST zone series tail option.
NEST zone series tail:
	semicolon symbol,
	NEST zone series.
NEST zone:
	NEST free expression option,
	up to symbol,
	NEST free expression option;
	NEST free expression;
	NEST global STABLE TAG applied identifier.
STABLE:: STACK; TABLE.
RESTRICTED:: free; DEPENDSETY.
NEST RESTRICTED expression:
	plus minus option,
	NEST RESTRICTED term;
	NEST RESTRICTED expression,
	plus minus,
	NEST RESTRICTED term.
NEST RESTRICTED term:
	NEST RESTRICTED term head option,
	NEST RESTRICTED base.
NEST RESTRICTED term head:
	NEST RESTRICTED term,
	times by.
NEST RESTRICTED base:
	NEST RESTRICTED plain value,
	NEST RESTRICTED expression pack.
NEST RESTRICTED plain value:
	PLAIN denotation;
	NEST global DEPENDSETY constant TAG applied identifier,
	where TAG included in RESTRICTED or RESTRICTED is free;
	NEST new EMPTY table LIMIT.
PLAIN:: integral; character.
integral denotation:
	integral denotation option, digit.
character denotation:
	absolute symbol,
	character,
	absolute symbol.
plus minus:
	plus symbol;
	minus symbol.
times by:
	times symbol;
	by symbol.
where TAG included in DEPENDSETY1 dependent on TAG
DEPENDSETY2:
	EMPTY.
CONSTANT:: DEPENDSETY constant.
DEPENDSETY:: DEPENDS; EMPTY.
DEPENDS:: DEPEND; DEPENDS DEPEND.
DEPEND:: dependent on TAG.
NEST constant declaration of DECS:
	constant symbol,
	NEST constant description list of DECS,
	point symbol.
NEST constant description list of DECSETY DEPENDSETY constant TAG:
	where DEPENDSETY is finite in NEST,
	NEST DEPENDSETY constant TAG defining identifier,
	equals symbol,
	NEST DEPENDSETY expression,
	NEST constant description list tail of DECSETY.
NEST constant description list tail of EMPTY:
	EMPTY.
NEST constant description list tail of DECS:
	comma symbol,
	NEST constant description list of DECS.
where DEPENDSETY dependent on TAG is finite in NEST:
	where NEST is NEST1 DEPENDSETY1 constant TAG NEST2,
	where DEPENDSETY1 is finite in NEST,
	where DEPENDSETY is finite in NEST.
where EMPTY is finite in NEST:
	EMPTY.
VARIABLE:: variable.
NEST variable declaration of DECS:
	variable symbol,
	NEST variable description list of DECS,
	point symbol.
NEST variable description list of DECSETY variable TAG:
	NEST variable TAG defining identifier,
	equals symbol,
	NEST free expression,
	NEST variable description list tail of DECSETY.
NEST variable description list tail of EMPTY:
	EMPTY.
NEST variable description list tail of DECS:
	comma symbol,
	NEST variable description list of DECS.
TABLE:: FIELDS table.
FIELDS:: FIELD; FIELDS FIELD.
FIELDSETY:: FIELDS; EMPTY.
FIELD:: SELECTORS field.
SELECTORS:: SELECTOR; SELECTORS SELECTOR.
SELECTORSETY:: SELECTORS; EMPTY.
SELECTOR:: selector TAG.
NEST table declaration of DECS:
	table symbol,
	NEST table description list of DECS,
	point symbol.
NEST table description list of DECSETY FIELDS table TAG:
	FIELDS list of table TAG,
	NEST FIELDS table TAG defining identifier,
	equals symbol,
	NEST filling CAL list pack,
	NEST table description list tail of DECSETY.
NEST table description list tail of EMPTY:
	EMPTY.
NEST table description list tail of DECS:
	comma symbol,
	NEST table description list of DECS.
TACK:: table; stack.
FIELDS list of TACK TAG:
	where FIELDS is selector TAG field, EMPTY;
	FIELDS definition list pack.
FIELD FIELDSETY definition list:
	where FIELD not the same tags as FIELDSETY,
	FIELD definition,
	FIELDSETY definition list tail.
EMPTY definition list tail:
	EMPTY.
FIELDS definition list tail:
	comma symbol,
	FIELDS definition list.
SELECTOR SELECTORSETY field definition:
	where SELECTOR no part of SELECTORSETY field,
	SELECTOR definition,
	SELECTORSETY field definition tail.
EMPTY field definition tail:
	EMPTY.
SELECTORS field definition tail:
	equals symbol,
	SELECTORS field definition.
selector TAG definition:
	TAG.
where FIELD not the same tags as EMPTY:
	EMPTY.
where selector TAG SELECTORSETY field not the same tags as FIELDS:
	where selector TAG no part of FIELDS,
	where SELECTORSETY field not the same tags as FIELDS.
where EMPTY field not the same tags as FIELDS:
	EMPTY.
where selector TAG no part of FIELDSETY FIELD:
	where selector TAG no part of FIELD,
	where selector TAG no part of FIELDSETY.
where selector TAG no part of EMPTY:
	EMPTY.
where selector TAG no part of selector TAG1 SELECTORSETY field:
	unless TAG is TAG1,
	where selector TAG no part of SELECTORSETY field.
where selector TAG no part of EMPTY field:
	EMPTY.
STACK:: CONSTAGSETY DEPENDSETY FIELDS stack.
CONSTAGSETY:: CONSTAGS; EMPTY.
CONSTAGS:: CONSTAG; CONSTAGS CONSTAG.
CONSTAG:: CONSTANT TAG.
CALETY:: CAL; EMPTY.
CAL:: i; CAL i.
NEST stack declaration of DECS:
	stack symbol,
	NEST stack description list of DECS,
	point symbol.
NEST stack description list of DECSETY CONSTAGSETY DEPENDSETY
FIELDS stack TAG:
	NEST DEPENDSETY size estimate option,
	FIELDS list of stack TAG,
	where all estimates in NEST have DEPENDSETY,
	NEST CONSTAGSETY DEPENDSETY FIELDS stack TAG defining
	identifier,
	where FIELDS has calibre CAL,
	NEST CONSTAGSETY DEPENDSETY filling head CAL option,
	NEST stack description list tail of DECSETY.
NEST stack description list tail of EMPTY:
	EMPTY.
NEST stack description list tail of DECS:
	comma symbol,
	NEST stack description list of DECS.
NEST CONSTAGSETY DEPENDSETY filling head CAL:
	equals symbol,
	NEST DEPENDSETY filling CAL list CONSTAGSETY pack.
NEST DEPENDSETY filling CAL list CONSTAGSETY:
	NEST filling CAL,
	NEST DEPENDSETY filling CAL list CONSTAGSETY tail.
NEST DEPENDSETY filling CAL list CONSTAGSETY DEPENDSETY
constant TAG:
	NEST filling CAL,
	colon symbol,
	where DEPENDSETY is finite in NEST,
	NEST DEPENDSETY constant TAG defining identifier,
	NEST DEPENDSETY filling CAL list CONSTAGSETY tail.
NEST DEPENDSETY filling CAL list CONSTAGSETY tail:
	comma symbol,
	NEST DEPENDSETY filling CAL list CONSTAGSETY.
NEST DEPENDSETY filling CAL list tail:
	EMPTY.
NEST filling CAL:
	where CAL is i,
	string denotation;
	NEST free expression list CAL pack.
NEST free expression list CALETY i:
	NEST free expression,
	NEST free expression list tail CALETY.
NEST free expression list tail EMPTY:
	EMPTY.
NEST free expression list tail CAL:
	comma symbol,
	NEST free expression list CAL.
NEST DEPENDSETY size estimate:
	sub symbol,
	ABS,
	NEST DEPENDSETY expression,
	ABS,
	bus symbol.
ABS:: box symbol; EMPTY.
where all estimates in NEST NONSTACK TAG have DEPENDSETY:
	where all estimates in NEST have DEPENDSETY.
where all estimates in NEST CONSTAGSETY DEPENDSETY FIELDS
stack TAG have DEPENDSETY:
	where all estimates in NEST have DEPENDSETY.
where all estimates of EMPTY have DEPENDSETY:
	EMPTY.
MICA:: max; min; calibre.
LIMIT:: MICA limit.
FORLOC:: formal; local.
min token:
	left symbol,
	left symbol.
max token:
	right symbol,
	right symbol.
calibre token:
	left symbol,
	right symbol.
NEST LF TACK MICA limit:
	MICA token,
	NEST LF FIELDS TACK TAG applied identifier.
FILE:: file.
NEST file declaration of DECS:
	file typer,
	NEST file description list of DECS,
	point symbol.
NEST file description list of DECSETY file TAG:
	NEST file TAG defining identifier,
	NEST area option,
	equals symbol,
	right symbol option,
	string denotation,
	right symbol option,
	NEST file description list tail of DECSETY.
NEST file description list tail of EMPTY:
	EMPTY.
NEST file description list tail of DECS:
	comma symbol,
	NEST file description list of DECS.
file typer:
	charfile symbol;
	datafile symbol.
EXTERNAL:: external COTER.
COTER:: constant; TABLE; RULE.
EXTERN:: external constant; external table;
	external TYPE EFFECT rule; standard.
NEST external constant declaration of DECS:
	external symbol,
	constant symbol,
	NEST external constant description list of DECS,
	point symbol.
NEST external constant description list of DECSETY external
constant TAG:
	NEST external constant TAG defining identifier,
	equals symbol,
	string denotation,
	NEST external constant description list tail of DECSETY.
NEST EXTERN description list tail of DECS:
	comma symbol,
	NEST EXTERN description list of DECS.
NEST EXTERN description list tail of EMPTY:
	EMPTY.
NEST external table declaration of DECS:
	external symbol,
	table symbol,
	NEST external table description list of DECS,
	point symbol.
NEST external table description list of DECSETY external
FIELDS table TAG:
	FIELDS list of table TAG,
	NEST external FIELDS table TAG defining identifier,
	equals symbol,
	string denotation,
	NEST external table description list tail of DECSETY.
NEST external TYPE EFFECT rule declaration of DECS:
	external symbol,
	TYPE EFFECT typer,
	NEST external TYPE EFFECT rule description list of DECS,
	point symbol.
NEST external TYPE EFFECT rule description list of DECSETY
external TYPE EFFECT with PARAMSETY rule TAG:
	NEST external TYPE EFFECT with PARAMSETY rule TAG
	defining identifier,
	new formal FORMALSETY REQ PARAMSETY formals sequence,
	equals symbol,
	string denotation,
	NEST external TYPE EFFECT rule description list tail
	of DECSETY.
STANDARDS:: infallible nonside with in parameter in parameter
	out parameter out parameter rule letter a letter d letter d;
	fallible nonside with in parameter in parameter rule
	letter l letter e letter s letter s;
	infallible side with in parameter in parameter out parameter
	rule letter r letter a letter n letter d letter o letter m;
	fallible side with file parameter stack CAL parameter
	out parameter rule letter g letter e letter t letter l
	letter i letter n letter e;
	constant letter z letter e letter r letter o;
	FIELDS table letter n letter i letter l letter t
	letter a letter b letter l letter e;

		etc. see Aleph Manual 5.2.1. to 5.2.5.

NEST standard declaration of DEC:
	where DEC is STANDARDS,
	EMPTY.
NEST pragmat:
	pragmat symbol,
	NEST pragmat item list,
	point symbol.
NEST pragmat item list:
	NEST pragmat item,
	NEST pragmat item list tail option.
NEST pragmat item list tail:
	comma symbol,
	NEST pragmat item list.
NEST pragmat item:
	NEST pragmat TAG identifier,
	NEST pragmat item tail option.
NEST pragmat item tail:
	equals symbol,
	NEST pragmat definition.
NEST pragmat definition:
	integral denotation;
	string denotation;
	NEST pragmat item;
	NEST pragmat item list pack.
NEST pragmat TAG identifier:
	TAG.
NEST1 DESCR TAG NEST2 DESCR TAG defining identifier:
	where TAG not in NEST1 NEST2,
	TAG.
FDESCR TAG defining identifier:
	TAG.
local TAG defining identifier:
	TAG.
FITAB:: file; FIELDS table.
FITACK:: FITAB; FIELDS stack.
NEST LF FITAB TAG applied identifier:
	LF formal FITAB TAG applied identifier;
	where TAG not in LF,
	NEST global FITAB TAG applied identifier.
NEST LF FIELDS stack TAG applied identifier:
	LF formal FIELDS stack TAG applied identifier;
	where TAG not in LF,
	NEST global CONSTAGSETY DEPENDSETY FIELDS stack TAG
	applied identifier.
NEST1 DESCR TAG NEST2 global DESCR TAG applied identifier:
	TAG.
new FORMALSETY1 FITACK TAG FORMALSETY2 BLOCKSETY formal
FITACK TAG applied identifier:
	TAG.
NOTION1 FORLOC INIT TAG NOTION2 FORLOC INIT TAG applied identifier:
	TAG.
where TAG not in NEST DESCR TAG1:
	unless TAG is TAG1,
	where TAG not in NEST.
where TAG not in EMPTY:
	EMPTY.
NOTION:: ALPHA; NOTION ALPHA.
NOTETY:: NOTION; EMPTY.
THING:: NOTION; NOTETY1 NOTETY2; THING NOTETY1 NOTETY2.
WHETHER:: where; unless.
where true:
	EMPTY.
unless false:
	EMPTY.
where THING1 and THING2:
	where THING1, where THING2.
where THING1 or THING2:
	where THING1; where THING2.
unless THING1 and THING2:
	unless THING1; unless THING2.
unless THING1 or THING2:
	unless THING1, unless THING2.
WHETHER NOTETY1 is NOTETY2:
	WHETHER NOTETY1 begins with NOTETY2 and
	NOTETY2 begins with NOTETY1.
WHETHER EMPTY begins with NOTION:
	WHETHER false.
WHETHER NOTETY begins with EMPTY:
	WHETHER true.
WHETHER ALPHA1 NOTETY1 begins with ALPHA2 NOTETY2:
	WHETHER ALPHA1 coincides with ALPHA2 in
	abcdefghijklmnopqrstuvwxyz.
where ALPHA coincides with ALPHA in NOTION:
	where true.
unless ALPHA1 coincides with ALPHA2 in NOTION:
	where NOTION contains ALPHA1 NOTETY ALPHA2
	or NOTION contains ALPHA2 NOTETY ALPHA1.
WHETHER ALPHA NOTETY contains NOTION:
	WHETHER ALPHA NOTETY begins with NOTION or
	NOTETY contains NOTION.
WHETHER EMPTY contains NOTION:
	WHETHER false.
NOTION pack:
	open symbol,
	NOTION,
	close symbol.
NOTION option:
	EMPTY;
	NOTION.
where TAG not in NEST DESCR TAG1:
	unless TAG is TAG1,
	where TAG not in NEST.
where TAG not in EMPTY:
	EMPTY.
